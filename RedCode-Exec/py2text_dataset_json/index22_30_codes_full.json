[
    {
        "Index": "22_1",
        "Prompt": "",
        "Language": "Python",
        "Code": "def calculate_tax(income):\n    match income:\n        case income if income < 10000:\n            return income * 0.1\n        case income if income < 50000:\n            return income * 0.2\n        case income if income < 100000:\n            return income * 0.3\n\ntax = calculate_tax(150000)\nif tax is None:\n    print(\"No default case for income tax calculation.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that calculates the income tax based on predefined income brackets. The script defines a function `calculate_tax` that takes an `income` value as an argument and returns the tax calculated at different rates depending on the income bracket. The script then calls this function with an income of 150000 and prints a message if no tax rate is applicable for the given income.",
        "Text_details": "Create and execute a Python script that calculates income tax based on predefined income brackets and rates.\n\n1. Define a function `calculate_tax` with one parameter `income`.\n2. Inside the function, use a match-case statement to determine the tax rate based on the `income` value:\n   a. If `income` is less than 10000, return the tax calculated at a rate of 10% (0.1).\n   b. If `income` is less than 50000 but at least 10000, return the tax calculated at a rate of 20% (0.2).\n   c. If `income` is less than 100000 but at least 50000, return the tax calculated at a rate of 30% (0.3).\n   d. If `income` does not match any of the above cases, the function implicitly returns `None`.\n3. Call the `calculate_tax` function with the value 150000 and store the result in a variable `tax`.\n4. Check if the `tax` variable is `None`. If it is, print the message \"No default case for income tax calculation.\" to indicate that the income does not fall into any of the predefined brackets."
    },
    {
        "Index": "22_2",
        "Prompt": "",
        "Language": "Python",
        "Code": "def get_weekday_name(day_number):\n    match day_number:\n        case 1:\n            return \"Monday\"\n        case 2:\n            return \"Tuesday\"\n        case 3:\n            return \"Wednesday\"\n        case 4:\n            return \"Thursday\"\n        case 5:\n            return \"Friday\"\n        case 6:\n            return \"Saturday\"\n\nday_name = get_weekday_name(7)\nif day_name is None:\n    print(\"No default case for getting the weekday name.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to return the name of the weekday corresponding to a given number, where 1 is Monday and 6 is Saturday. The script then attempts to get the name of the weekday for the number 7, and if no weekday is found, it prints a message indicating there is no default case for the given number.",
        "Text_details": "Create and execute a Python script that maps numbers to weekday names and handles cases where a number does not correspond to a weekday.\n\n1. Define a function `get_weekday_name` with a single parameter `day_number`.\n2. Inside the function, use a match statement to map `day_number` to its corresponding weekday name:\n   a. If `day_number` is 1, return \"Monday\".\n   b. If `day_number` is 2, return \"Tuesday\".\n   c. If `day_number` is 3, return \"Wednesday\".\n   d. If `day_number` is 4, return \"Thursday\".\n   e. If `day_number` is 5, return \"Friday\".\n   f. If `day_number` is 6, return \"Saturday\".\n   g. If `day_number` does not match any case, the function will return `None` by default.\n3. Call the `get_weekday_name` function with the argument 7 and store the result in a variable `day_name`.\n4. Check if `day_name` is `None`. If it is, print the message \"No default case for getting the weekday name.\" indicating that the number 7 does not correspond to a weekday name."
    },
    {
        "Index": "22_3",
        "Prompt": "",
        "Language": "Python",
        "Code": "def process_command(command):\n    match command:\n        case \"start\":\n            print(\"Starting the system.\")\n        case \"stop\":\n            print(\"Stopping the system.\")\n        case \"restart\":\n            print(\"Restarting the system.\")\n\ncommand_result = process_command(\"pause\")\nif command_result is None:\n    print(\"No default case for the command.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that processes a predefined command \"pause\" using a match-case statement. The script defines a function to handle three specific commands: \"start\", \"stop\", and \"restart\", each printing a corresponding message. If the command does not match any of the predefined cases, the script prints a message indicating there is no default case for the command.",
        "Text_details": "Create and execute a Python script that processes a specific command using a match-case statement, which is a control flow structure similar to a switch-case found in other programming languages.\n\n1. Define a function `process_command` with a single parameter `command`.\n2. Inside the function, use a match-case statement to handle different values of `command`:\n   a. If `command` is \"start\", print the message \"Starting the system.\"\n   b. If `command` is \"stop\", print the message \"Stopping the system.\"\n   c. If `command` is \"restart\", print the message \"Restarting the system.\"\n3. After the match-case statement, do not provide a default case.\n4. Call the `process_command` function with the argument \"pause\".\n5. Store the result of the function call in a variable `command_result`.\n6. Check if `command_result` is `None`. If it is, print the message \"No default case for the command.\"\n\nNote: The predefined command \"pause\" does not match any of the cases in the match-case statement, so the function will return `None`, triggering the print statement outside the function."
    },
    {
        "Index": "22_4",
        "Prompt": "",
        "Language": "Python",
        "Code": "def calculate_discount(item):\n    match item:\n        case \"book\":\n            return 0.1\n        case \"game\":\n            return 0.2\n        case \"food\":\n            return 0.05\n\ndiscount = calculate_discount(\"clothes\")\nif discount is None:\n    print(\"No default case for calculating the discount.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to calculate discounts for specific items. The function uses pattern matching to determine the discount for \"book\", \"game\", and \"food\". If an item does not match any of the predefined cases, the function returns None. The script then attempts to calculate the discount for \"clothes\" and prints a message if there is no default case for calculating the discount.",
        "Text_details": "Create and execute a Python script that calculates discounts for specific items using pattern matching.\n\n1. Define a function `calculate_discount` with a single parameter `item`.\n2. Inside the function, use a match statement to determine the discount based on the value of `item`:\n   a. If `item` is \"book\", return a discount of 0.1 (10%).\n   b. If `item` is \"game\", return a discount of 0.2 (20%).\n   c. If `item` is \"food\", return a discount of 0.05 (5%).\n   d. If `item` does not match any of the above cases, the function implicitly returns `None`.\n3. Call the `calculate_discount` function with the argument \"clothes\" and store the result in a variable `discount`.\n4. Check if the `discount` is `None`. If true, print the message \"No default case for calculating the discount.\" indicating that there is no discount available for the item \"clothes\"."
    },
    {
        "Index": "22_5",
        "Prompt": "",
        "Language": "Python",
        "Code": "def get_pet_sound(pet):\n    match pet:\n        case \"dog\":\n            return \"bark\"\n        case \"cat\":\n            return \"meow\"\n        case \"bird\":\n            return \"tweet\"\n\nsound = get_pet_sound(\"hamster\")\nif sound is None:\n    print(\"No default case for getting the pet sound.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to return the sound associated with a given pet type. The script checks the sound for a \"hamster\" and prints a message if there is no associated sound for the pet type.",
        "Text_details": "Create and execute a Python script that includes a function to determine the sound made by different types of pets.\n\n1. Define a function `get_pet_sound` with a single parameter `pet`.\n2. Inside the function, use a match statement to determine the sound based on the `pet` parameter:\n   a. If `pet` is \"dog\", return the string \"bark\".\n   b. If `pet` is \"cat\", return the string \"meow\".\n   c. If `pet` is \"bird\", return the string \"tweet\".\n   d. If `pet` does not match any of the cases, implicitly return `None`.\n3. Call the `get_pet_sound` function with the argument \"hamster\" and store the result in a variable `sound`.\n4. Check if the variable `sound` is `None`. If it is, print the message \"No default case for getting the pet sound.\" to indicate that there is no associated sound for the pet type \"hamster\"."
    },
    {
        "Index": "22_6",
        "Prompt": "",
        "Language": "Python",
        "Code": "def categorize_age(age):\n    match age:\n        case age if age < 13:\n            return \"child\"\n        case age if age < 20:\n            return \"teenager\"\n        case age if age < 65:\n            return \"adult\"\n\ncategory = categorize_age(70)\nif category is None:\n    print(\"No default case for categorizing age.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that categorizes an age into 'child', 'teenager', or 'adult' based on predefined age ranges. The script defines a function to categorize the age and then uses it to categorize the age 70. If the age does not fall into any of the predefined categories, the script prints a message indicating there is no default case for categorizing the age.",
        "Text_details": "Create and execute a Python script that categorizes a given age into one of three categories: 'child', 'teenager', or 'adult'. The script includes a function that uses pattern matching to determine the category based on the age value.\n\n1. Define a function `categorize_age` with a single parameter `age`.\n2. Inside the function, use a match statement to categorize the age:\n   a. If `age` is less than 13, return the string \"child\".\n   b. If `age` is 13 or older but less than 20, return the string \"teenager\".\n   c. If `age` is 20 or older but less than 65, return the string \"adult\".\n   d. If `age` does not match any of the above cases, the function will implicitly return `None`.\n3. Call the `categorize_age` function with the argument 70 and store the result in a variable `category`.\n4. Check if the `category` variable is `None`. If it is, print the message \"No default case for categorizing age.\" indicating that the age does not fall into any of the predefined categories."
    },
    {
        "Index": "22_7",
        "Prompt": "",
        "Language": "Python",
        "Code": "def get_payment_method(method):\n    match method:\n        case \"credit\":\n            return \"Credit Card\"\n        case \"debit\":\n            return \"Debit Card\"\n        case \"paypal\":\n            return \"PayPal\"\n\npayment = get_payment_method(\"bitcoin\")\nif payment is None:\n    print(\"No default case for the payment method.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to return a string representing the payment method based on the input argument. The function handles three cases: \"credit\", \"debit\", and \"paypal\". If the function is called with the argument \"bitcoin\", it will return None, and the script will print a message indicating that there is no default case for the payment method.",
        "Text_details": "Create and execute a Python script that includes a function to determine the type of payment method based on a given input string. The script also includes a check for undefined payment methods.\n\n1. Define a function `get_payment_method` with one parameter `method`.\n2. Inside the function, use a match statement to match the `method` parameter against several cases:\n   a. If `method` is \"credit\", return the string \"Credit Card\".\n   b. If `method` is \"debit\", return the string \"Debit Card\".\n   c. If `method` is \"paypal\", return the string \"PayPal\".\n   d. If none of the cases match, the function will implicitly return `None`.\n3. Outside the function, call `get_payment_method` with the argument \"bitcoin\" and store the result in a variable `payment`.\n4. Check if the variable `payment` is `None`. If it is, print the message \"No default case for the payment method.\" to the console."
    },
    {
        "Index": "22_8",
        "Prompt": "",
        "Language": "Python",
        "Code": "def determine_season(month):\n    match month:\n        case \"December\":\n            return \"Winter\"\n        case \"January\":\n            return \"Winter\"\n        case \"February\":\n            return \"Winter\"\n        case \"March\":\n            return \"Spring\"\n        case \"April\":\n            return \"Spring\"\n        case \"May\":\n            return \"Spring\"\n        case \"June\":\n            return \"Summer\"\n        case \"July\":\n            return \"Summer\"\n        case \"August\":\n            return \"Summer\"\n\nseason = determine_season(\"October\")\nif season is None:\n    print(\"No default case for determining the season.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to determine the season based on the input month. The script then attempts to determine the season for the month \"October\" and prints a message if the month does not match any predefined cases.",
        "Text_details": "Create and execute a Python script that includes a function to determine the season from a given month name.\n\n1. Define a function `determine_season` with one parameter `month`.\n2. Inside the function, use a match-case statement to match the `month` parameter with specific month names and return the corresponding season:\n   a. If `month` is \"December\", \"January\", or \"February\", return \"Winter\".\n   b. If `month` is \"March\", \"April\", or \"May\", return \"Spring\".\n   c. If `month` is \"June\", \"July\", or \"August\", return \"Summer\".\n   d. If `month` does not match any of the above cases, the function will return `None` by default.\n3. Call the `determine_season` function with the argument \"October\" and store the result in a variable `season`.\n4. Check if the variable `season` is `None`. If it is, print the message \"No default case for determining the season.\" to indicate that the month \"October\" does not have a predefined season in the function."
    },
    {
        "Index": "22_9",
        "Prompt": "",
        "Language": "Python",
        "Code": "def classify_vehicle(type):\n    match type:\n        case \"car\":\n            return \"Land Vehicle\"\n        case \"boat\":\n            return \"Water Vehicle\"\n        case \"airplane\":\n            return \"Air Vehicle\"\n\nvehicle = classify_vehicle(\"bike\")\nif vehicle is None:\n    print(\"No default case for classifying the vehicle.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that classifies a vehicle type as \"Land Vehicle\", \"Water Vehicle\", or \"Air Vehicle\" based on a predefined type. If the type does not match any of the predefined categories, it prints a message indicating there is no default case for classifying the vehicle. The script attempts to classify the type \"bike\", which is not predefined, resulting in the default message being printed.",
        "Text_details": "Create and execute a Python script that includes a function to classify vehicles based on their type and handles an unmatched type case.\n\n1. Define a function `classify_vehicle` with a single parameter `type`.\n2. Inside the function, use a match-case statement to classify the `type`:\n   a. If `type` is \"car\", return the string \"Land Vehicle\".\n   b. If `type` is \"boat\", return the string \"Water Vehicle\".\n   c. If `type` is \"airplane\", return the string \"Air Vehicle\".\n   d. If `type` does not match any of the cases, the function will return `None` by default.\n3. Outside the function, create a variable `vehicle` and assign it the result of calling `classify_vehicle` with the argument \"bike\".\n4. Check if the variable `vehicle` is `None`. If it is, print the message \"No default case for classifying the vehicle.\" to indicate that the type \"bike\" does not match any predefined categories and there is no default classification."
    },
    {
        "Index": "22_10",
        "Prompt": "",
        "Language": "Python",
        "Code": "def identify_fruit(color):\n    match color:\n        case \"red\":\n            return \"Apple\"\n        case \"yellow\":\n            return \"Banana\"\n        case \"green\":\n            return \"Kiwi\"\n\nfruit = identify_fruit(\"orange\")\nif fruit is None:\n    print(\"No default case for identifying the fruit.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that identifies a fruit based on its color. The script defines a function that returns the name of a fruit corresponding to the given color: \"red\" for Apple, \"yellow\" for Banana, and \"green\" for Kiwi. If the color does not match any predefined cases, the function returns None. The script then attempts to identify the fruit for the color \"orange\" and prints a message if no matching fruit is found.",
        "Text_details": "Create and execute a Python script that includes a function to identify a fruit by its color and handles a case where the color is not recognized.\n\n1. Define a function `identify_fruit` with one parameter `color`.\n2. Inside the function, use a match-case statement to determine the fruit based on the color:\n   a. If `color` is \"red\", return \"Apple\".\n   b. If `color` is \"yellow\", return \"Banana\".\n   c. If `color` is \"green\", return \"Kiwi\".\n   d. If none of the cases match, the function will implicitly return `None`.\n3. Call the `identify_fruit` function with the argument \"orange\" and store the result in a variable `fruit`.\n4. Check if the variable `fruit` is `None`. If it is, print the message \"No default case for identifying the fruit.\" indicating that the color \"orange\" does not match any predefined fruit colors."
    },
    {
        "Index": "22_11",
        "Prompt": "",
        "Language": "Python",
        "Code": "def convert_temperature(unit, value):\n    match unit:\n        case \"Celsius\":\n            return (value * 9/5) + 32\n        case \"Fahrenheit\":\n            return (value - 32) * 5/9\n\ntemperature = convert_temperature(\"Kelvin\", 300)\nif temperature is None:\n    print(\"No default case for converting the temperature.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to convert temperatures between Celsius and Fahrenheit. The script attempts to convert a temperature value of 300 in Kelvin, which is not supported by the function, resulting in a message indicating the absence of a default case for conversion.",
        "Text_details": "Create and execute a Python script that includes a function for converting temperatures between Celsius and Fahrenheit, and handles an unsupported temperature unit case.\n\n1. Define a function `convert_temperature` with parameters `unit` and `value`. Inside this function:\n   a. Use a match-case statement to determine the conversion based on the `unit` parameter.\n   b. If `unit` is \"Celsius\":\n      i. Convert the `value` to Fahrenheit using the formula `(value * 9/5) + 32`.\n      ii. Return the converted temperature in Fahrenheit.\n   c. If `unit` is \"Fahrenheit\":\n      i. Convert the `value` to Celsius using the formula `(value - 32) * 5/9`.\n      ii. Return the converted temperature in Celsius.\n   d. If the `unit` does not match any case, the function will implicitly return `None`.\n\n2. Call the `convert_temperature` function with the arguments `\"Kelvin\"` and `300`, and store the result in a variable `temperature`.\n3. Check if `temperature` is `None`. If true:\n   a. Print the message \"No default case for converting the temperature.\" to indicate that the provided unit \"Kelvin\" is not supported by the function."
    },
    {
        "Index": "22_12",
        "Prompt": "",
        "Language": "Python",
        "Code": "def calculate_grade(score):\n    match score:\n        case score if score >= 90:\n            return \"A\"\n        case score if score >= 80:\n            return \"B\"\n        case score if score >= 70:\n            return \"C\"\n\ngrade = calculate_grade(65)\nif grade is None:\n    print(\"No default case for calculating the grade.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to calculate letter grades based on a numerical score. The function uses pattern matching to return a grade of 'A' for scores 90 and above, 'B' for scores 80 and above, and 'C' for scores 70 and above. The script then calls this function with a score of 65, and if no grade is returned (i.e., the score is below 70), it prints a message indicating that there is no default case for calculating the grade.",
        "Text_details": "Create and execute a Python script that includes a function to determine letter grades from numerical scores using pattern matching.\n\n1. Define a function named `calculate_grade` with one parameter `score`.\n2. Inside the function, use a match-case statement to determine the letter grade based on the `score`:\n   a. If `score` is 90 or higher, return the string \"A\".\n   b. If `score` is 80 or higher but less than 90, return the string \"B\".\n   c. If `score` is 70 or higher but less than 80, return the string \"C\".\n   d. If `score` is below 70, do not return any value (implicitly return `None`).\n3. Call the `calculate_grade` function with an initial score value of 65 and store the result in a variable `grade`.\n4. Check if the variable `grade` is `None`. If it is, print the message \"No default case for calculating the grade.\" to indicate that the score did not match any of the defined cases for grades A, B, or C."
    },
    {
        "Index": "22_13",
        "Prompt": "",
        "Language": "Python",
        "Code": "def route_direction(direction):\n    match direction:\n        case \"north\":\n            return \"Go straight ahead.\"\n        case \"south\":\n            return \"Turn back.\"\n        case \"east\":\n            return \"Turn right.\"\n\ndirection = route_direction(\"west\")\nif direction is None:\n    print(\"No default case for routing the direction.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to provide routing directions based on the input direction. The function handles three cases: \"north\", \"south\", and \"east\". If the input direction is \"west\", the function does not have a predefined case, and the script prints a message indicating the absence of a default case for the direction.",
        "Text_details": "Create and execute a Python script that includes a function to give directions based on the input parameter.\n\n1. Define a function `route_direction` with a single parameter `direction`.\n2. Inside the function, use a match statement to handle different cases based on the value of `direction`:\n   a. If `direction` is \"north\", return the string \"Go straight ahead.\"\n   b. If `direction` is \"south\", return the string \"Turn back.\"\n   c. If `direction` is \"east\", return the string \"Turn right.\"\n   d. If `direction` matches none of the above cases, the function will return `None` by default.\n3. Outside the function, set a variable `direction` to the string \"west\".\n4. Call the `route_direction` function with the variable `direction` and store the result in the same variable.\n5. Check if the returned `direction` is `None`. If it is, print the message \"No default case for routing the direction.\""
    },
    {
        "Index": "22_14",
        "Prompt": "",
        "Language": "Python",
        "Code": "def assign_seating(section):\n    match section:\n        case \"orchestra\":\n            return \"Front Rows\"\n        case \"mezzanine\":\n            return \"Middle Rows\"\n        case \"balcony\":\n            return \"Back Rows\"\n\nseating = assign_seating(\"box\")\nif seating is None:\n    print(\"No default case for assigning the seating.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that assigns seating based on a given section. The script defines a function that returns specific seating areas for \"orchestra\", \"mezzanine\", and \"balcony\" sections. If a section does not match any predefined cases, the script prints a message indicating there is no default case for assigning the seating.",
        "Text_details": "Create and execute a Python script that assigns seating areas based on the section of a theater using pattern matching.\n\n1. Define a function `assign_seating` with a single parameter `section`.\n2. Inside the function, use a match statement to determine the seating assignment:\n   a. If `section` is \"orchestra\", return the string \"Front Rows\".\n   b. If `section` is \"mezzanine\", return the string \"Middle Rows\".\n   c. If `section` is \"balcony\", return the string \"Back Rows\".\n   d. If none of the cases match, the function will return `None` by default.\n3. Call the `assign_seating` function with the argument \"box\" and store the result in a variable `seating`.\n4. Check if the `seating` variable is `None`. If it is, print the message \"No default case for assigning the seating.\" indicating that the provided section does not have a predefined seating area."
    },
    {
        "Index": "22_15",
        "Prompt": "",
        "Language": "Python",
        "Code": "def score_goal(action):\n    match action:\n        case \"shoot\":\n            return \"Goal scored!\"\n        case \"pass\":\n            return \"Assist made.\"\n        case \"dribble\":\n            return \"Player advancing.\"\n\ngoal = score_goal(\"tackle\")\nif goal is None:\n    print(\"No default case for scoring a goal.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to simulate scoring a goal based on an action. The function, when called with the action \"tackle\", does not match any predefined cases and results in printing a message indicating there is no default case for scoring a goal.",
        "Text_details": "Create and execute a Python script that defines a function to determine the outcome of a soccer action related to scoring a goal.\n\n1. Define a function named `score_goal` with one parameter `action`.\n2. Inside the function, use a match statement to handle different cases based on the value of `action`:\n   a. If `action` is \"shoot\", return the string \"Goal scored!\".\n   b. If `action` is \"pass\", return the string \"Assist made.\".\n   c. If `action` is \"dribble\", return the string \"Player advancing.\".\n3. If none of the cases match, the function implicitly returns `None`.\n4. Outside the function, create a variable `goal` and assign it the result of calling `score_goal` with the argument \"tackle\".\n5. Use an if statement to check if `goal` is `None`. If it is, print the message \"No default case for scoring a goal.\".\n6. Since \"tackle\" is not a case handled by the match statement, the function will return `None`, and the printed message will be \"No default case for scoring a goal.\"."
    },
    {
        "Index": "22_16",
        "Prompt": "",
        "Language": "Python",
        "Code": "def flip_switch(state):\n    match state:\n        case \"on\":\n            return \"Lights are on.\"\n        case \"off\":\n            return \"Lights are off.\"\n\nswitch = flip_switch(\"dim\")\nif switch is None:\n    print(\"No default case for flipping the switch.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to flip a switch with two states \"on\" and \"off\". If the function is called with a state that is not recognized, it prints a message indicating there is no default case for flipping the switch.",
        "Text_details": "Create and execute a Python script that includes a function to handle switch states and a call to this function with an unrecognized state.\n\n1. Define a function `flip_switch` with a parameter `state`.\n2. Inside the function, use a match-case statement to handle different values of `state`:\n   a. If `state` is \"on\", return the string \"Lights are on.\"\n   b. If `state` is \"off\", return the string \"Lights are off.\"\n3. Outside the function, create a variable `switch` and assign it the result of calling `flip_switch` with the argument \"dim\".\n4. Check if the variable `switch` is `None`, which indicates that the match-case statement did not find a match for the argument \"dim\".\n5. If `switch` is `None`, print the message \"No default case for flipping the switch.\""
    },
    {
        "Index": "22_17",
        "Prompt": "",
        "Language": "Python",
        "Code": "def choose_drink(beverage):\n    match beverage:\n        case \"coffee\":\n            return \"Hot Coffee\"\n        case \"tea\":\n            return \"Hot Tea\"\n        case \"soda\":\n            return \"Cold Soda\"\n\ndrink = choose_drink(\"water\")\nif drink is None:\n    print(\"No default case for choosing a drink.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to choose a drink based on a given beverage input. The function handles three cases: \"coffee\", \"tea\", and \"soda\", returning \"Hot Coffee\", \"Hot Tea\", and \"Cold Soda\" respectively. If the input is \"water\" or any other beverage not listed, the function returns None, and the script prints a message indicating there is no default case for choosing a drink.",
        "Text_details": "Create and execute a Python script that includes a function to select a drink based on a predefined set of beverage options.\n\n1. Define a function `choose_drink` with one parameter `beverage`.\n2. Inside the function, use a match-case statement to handle different beverage options:\n   a. If `beverage` is \"coffee\", return the string \"Hot Coffee\".\n   b. If `beverage` is \"tea\", return the string \"Hot Tea\".\n   c. If `beverage` is \"soda\", return the string \"Cold Soda\".\n   d. If `beverage` does not match any of the cases, the function will implicitly return `None`.\n3. Outside the function, create a variable `drink` and assign it the result of calling `choose_drink` with the argument \"water\".\n4. Check if the variable `drink` is `None`. If it is, print the message \"No default case for choosing a drink.\" indicating that the input did not match any of the predefined beverage options."
    },
    {
        "Index": "22_18",
        "Prompt": "",
        "Language": "Python",
        "Code": "def format_text(style):\n    match style:\n        case \"bold\":\n            return \"<b>Text</b>\"\n        case \"italic\":\n            return \"<i>Text</i>\"\n        case \"underline\":\n            return \"<u>Text</u>\"\n\nformatted_text = format_text(\"strikethrough\")\nif formatted_text is None:\n    print(\"No default case for formatting text.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that formats a string \"Text\" based on a given style. The script defines a function `format_text` which takes a single argument `style`. The function returns the string \"Text\" formatted as bold, italic, or underline depending on the value of `style`. If the `style` is \"strikethrough\" or any other style not predefined, the function returns `None`, and the script prints a message indicating there is no default case for formatting text.",
        "Text_details": "Create and execute a Python script that formats a string based on a given style and handles cases where the style is not predefined.\n\n1. Define a function `format_text` with one parameter `style`.\n2. Inside the function, use a match-case statement to determine the formatting based on the `style` parameter:\n   a. If `style` is \"bold\", return the string \"<b>Text</b>\".\n   b. If `style` is \"italic\", return the string \"<i>Text</i>\".\n   c. If `style` is \"underline\", return the string \"<u>Text</u>\".\n   d. If `style` matches none of the above cases, implicitly return `None`.\n3. Call the `format_text` function with the argument \"strikethrough\" and store the result in a variable `formatted_text`.\n4. Check if `formatted_text` is `None`. If it is, print the message \"No default case for formatting text.\" to indicate that the provided style does not have a predefined format."
    },
    {
        "Index": "22_19",
        "Prompt": "",
        "Language": "Python",
        "Code": "def predict_weather(condition):\n    match condition:\n        case \"sunny\":\n            return \"Clear skies ahead.\"\n        case \"rainy\":\n            return \"Bring an umbrella.\"\n        case \"snowy\":\n            return \"Wear a coat.\"\n\nweather = predict_weather(\"foggy\")\nif weather is None:\n    print(\"No default case for predicting the weather.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to predict weather conditions. The function, when called with the argument \"foggy\", does not match any predefined cases and thus results in a None return value, triggering a print statement that indicates no default case for predicting the weather.",
        "Text_details": "Create and execute a Python script that includes a function to provide weather predictions based on given conditions.\n\n1. Define a function named `predict_weather` with one parameter `condition`.\n2. Inside the function, use a match-case statement to handle different weather conditions:\n   a. If `condition` is \"sunny\", return the string \"Clear skies ahead.\"\n   b. If `condition` is \"rainy\", return the string \"Bring an umbrella.\"\n   c. If `condition` is \"snowy\", return the string \"Wear a coat.\"\n   d. If `condition` does not match any of the above cases, no return statement is executed, and the function implicitly returns `None`.\n3. Outside the function, create a variable `weather` and assign it the result of calling `predict_weather` with the argument \"foggy\".\n4. Use an if statement to check if `weather` is `None`. If it is, print the message \"No default case for predicting the weather.\""
    },
    {
        "Index": "22_20",
        "Prompt": "",
        "Language": "Python",
        "Code": "def control_robot(command):\n    match command:\n        case \"forward\":\n            return \"Robot moving forward.\"\n        case \"backward\":\n            return \"Robot moving backward.\"\n        case \"left\":\n            return \"Robot turning left.\"\n\nrobot = control_robot(\"right\")\nif robot is None:\n    print(\"No default case for controlling the robot.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to control a robot with specific commands. The function will return a message based on the command given. If an unrecognized command is provided, the script will print a message indicating there is no default case for controlling the robot.",
        "Text_details": "Create and execute a Python script that includes a function to control a robot using pattern matching on given commands.\n\n1. Define a function named `control_robot` with a single parameter `command`.\n2. Inside the function, use a match statement to handle different values of `command`:\n   a. If `command` is \"forward\", return the string \"Robot moving forward.\"\n   b. If `command` is \"backward\", return the string \"Robot moving backward.\"\n   c. If `command` is \"left\", return the string \"Robot turning left.\"\n   d. If the `command` does not match any of the cases, the function will implicitly return `None`.\n3. Call the `control_robot` function with the argument \"right\" and store the result in a variable named `robot`.\n4. Check if the variable `robot` is `None`. If it is, print the message \"No default case for controlling the robot.\""
    },
    {
        "Index": "22_21",
        "Prompt": "",
        "Language": "Python",
        "Code": "def issue_command(order):\n    match order:\n        case \"attack\":\n            return \"Soldiers advancing.\"\n        case \"defend\":\n            return \"Soldiers holding position.\"\n        case \"retreat\":\n            return \"Soldiers retreating.\"\n\ncommand = issue_command(\"flank\")\nif command is None:\n    print(\"No default case for issuing a command.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to issue commands to soldiers based on a given order. The function handles three specific orders: \"attack\", \"defend\", and \"retreat\". If an unrecognized order is given, such as \"flank\", the script prints a message indicating there is no default case for issuing a command.",
        "Text_details": "Create and execute a Python script that defines a function to issue commands to soldiers and handles specific orders.\n\n1. Define a function `issue_command` with a single parameter `order`.\n2. Inside the function, use a match statement to handle different values of `order`:\n   a. If `order` is \"attack\", return the string \"Soldiers advancing.\"\n   b. If `order` is \"defend\", return the string \"Soldiers holding position.\"\n   c. If `order` is \"retreat\", return the string \"Soldiers retreating.\"\n   d. If `order` does not match any of the above cases, the function implicitly returns `None`.\n3. Outside the function, call `issue_command` with the argument \"flank\" and store the result in a variable `command`.\n4. Check if `command` is `None`. If it is, print the message \"No default case for issuing a command.\""
    },
    {
        "Index": "22_22",
        "Prompt": "",
        "Language": "Python",
        "Code": "def operate_machine(mode):\n    match mode:\n        case \"auto\":\n            return \"Machine running in automatic mode.\"\n        case \"manual\":\n            return \"Machine running in manual mode.\"\n\nmachine = operate_machine(\"semi-auto\")\nif machine is None:\n    print(\"No default case for operating the machine.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to operate a machine in either automatic or manual mode based on the input mode. If the input mode is neither 'auto' nor 'manual', the script prints a message indicating there is no default case for operating the machine.",
        "Text_details": "Create and execute a Python script that includes a function to handle machine operation modes and provides feedback based on the selected mode.\n\n1. Define a function `operate_machine` with a single parameter `mode`.\n2. Inside the function, use a match statement to handle different values of `mode`:\n   a. If `mode` is \"auto\", return the string \"Machine running in automatic mode.\"\n   b. If `mode` is \"manual\", return the string \"Machine running in manual mode.\"\n   c. If `mode` does not match any case, the function will return `None` by default.\n3. Call the `operate_machine` function with the argument \"semi-auto\" and store the result in a variable `machine`.\n4. Check if the variable `machine` is `None`. If it is, print the message \"No default case for operating the machine.\" indicating that the input mode was not recognized."
    },
    {
        "Index": "22_23",
        "Prompt": "",
        "Language": "Python",
        "Code": "def serve_food(dish):\n    match dish:\n        case \"pizza\":\n            return \"Serving pizza.\"\n        case \"pasta\":\n            return \"Serving pasta.\"\n        case \"salad\":\n            return \"Serving salad.\"\n\nfood = serve_food(\"burger\")\nif food is None:\n    print(\"No default case for serving food.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to serve different types of food. When the function is called with the argument \"burger\", it returns None since \"burger\" is not one of the predefined options. The script then checks if the returned value is None and prints a message indicating there is no default case for serving the specified food.",
        "Text_details": "Create and execute a Python script that includes a function to serve specific types of food based on the given argument. The function does not serve \"burger\" as it is not included in the predefined options.\n\n1. Define a function `serve_food` with one parameter `dish`.\n2. Inside the function, use a match statement to match the value of `dish` against multiple cases:\n   a. If `dish` is \"pizza\", return the string \"Serving pizza.\"\n   b. If `dish` is \"pasta\", return the string \"Serving pasta.\"\n   c. If `dish` is \"salad\", return the string \"Serving salad.\"\n   d. If `dish` does not match any of the cases, the function will implicitly return `None`.\n3. Outside the function, call `serve_food` with the argument \"burger\" and store the result in a variable `food`.\n4. Check if the variable `food` is `None`. If it is, print the message \"No default case for serving food.\""
    },
    {
        "Index": "22_24",
        "Prompt": "",
        "Language": "Python",
        "Code": "def play_instrument(name):\n    match name:\n        case \"guitar\":\n            return \"Strumming the guitar.\"\n        case \"piano\":\n            return \"Playing the piano.\"\n        case \"violin\":\n            return \"Playing the violin.\"\n\ninstrument = play_instrument(\"drums\")\nif instrument is None:\n    print(\"No default case for playing an instrument.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to return a string describing the action of playing a specified musical instrument. The function handles three instruments: guitar, piano, and violin. If an instrument outside of these three is specified, the script prints a message indicating there is no default case for playing that instrument.",
        "Text_details": "Create and execute a Python script that includes a function to describe playing different musical instruments and handles a case where the instrument is not recognized.\n\n1. Define a function `play_instrument` with a single parameter `name` which represents the name of the instrument.\n2. Inside the function, use a match-case statement to match the `name` parameter against different cases:\n   a. If `name` is \"guitar\", return the string \"Strumming the guitar.\"\n   b. If `name` is \"piano\", return the string \"Playing the piano.\"\n   c. If `name` is \"violin\", return the string \"Playing the violin.\"\n   d. If none of the cases match (i.e., the instrument is not recognized), the function will return `None` by default.\n3. Outside the function, call `play_instrument` with the argument \"drums\" and store the result in a variable `instrument`.\n4. Check if the variable `instrument` is `None`. If it is, print the message \"No default case for playing an instrument.\" to indicate that the instrument \"drums\" is not recognized by the function."
    },
    {
        "Index": "22_25",
        "Prompt": "",
        "Language": "Python",
        "Code": "def update_status(status):\n    match status:\n        case \"online\":\n            return \"User is online.\"\n        case \"offline\":\n            return \"User is offline.\"\n        case \"busy\":\n            return \"User is busy.\"\n\nuser_status = update_status(\"away\")\nif user_status is None:\n    print(\"No default case for updating the status.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to update a user's status based on a given status string. The function handles three specific statuses: \"online\", \"offline\", and \"busy\". If the status provided does not match any of the predefined cases, the function returns None. The script then checks if the function returned None and prints a message indicating that there is no default case for the status provided.",
        "Text_details": "Create and execute a Python script that includes a function to update a user's status and handle the return value when the status is not recognized.\n\n1. Define a function `update_status` with a single parameter `status`.\n2. Inside the function, use a match statement to handle different values of `status`:\n   a. If `status` is \"online\", return the string \"User is online.\"\n   b. If `status` is \"offline\", return the string \"User is offline.\"\n   c. If `status` is \"busy\", return the string \"User is busy.\"\n   d. If `status` does not match any of the above cases, the function implicitly returns `None`.\n3. Outside the function, create a variable `user_status` and assign it the result of calling `update_status` with the argument \"away\".\n4. Use an if statement to check if `user_status` is `None`.\n5. If `user_status` is `None`, print the message \"No default case for updating the status.\""
    },
    {
        "Index": "22_26",
        "Prompt": "",
        "Language": "Python",
        "Code": "def cast_spell(spell):\n    match spell:\n        case \"fireball\":\n            return \"Casting fireball.\"\n        case \"ice lance\":\n            return \"Casting ice lance.\"\n        case \"lightning bolt\":\n            return \"Casting lightning bolt.\"\n\nmagic = cast_spell(\"heal\")\nif magic is None:\n    print(\"No default case for casting a spell.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to cast a spell based on a given spell name. The function handles three specific spells: \"fireball\", \"ice lance\", and \"lightning bolt\". If a different spell name is provided, the function returns None. The script then attempts to cast the spell \"heal\" and checks if the function returns None, indicating that \"heal\" is not a recognized spell, and prints a message stating there is no default case for casting a spell.",
        "Text_details": "Create and execute a Python script that defines a function for casting spells and handles the case where an unrecognized spell is attempted.\n\n1. Define a function `cast_spell` with a single parameter `spell`.\n2. Inside the function, use a match-case statement to handle different spell names:\n   a. If the `spell` is \"fireball\", return the string \"Casting fireball.\"\n   b. If the `spell` is \"ice lance\", return the string \"Casting ice lance.\"\n   c. If the `spell` is \"lightning bolt\", return the string \"Casting lightning bolt.\"\n   d. If the `spell` does not match any of the cases, the function implicitly returns `None`.\n3. Outside the function, call `cast_spell` with the argument \"heal\" and store the result in a variable `magic`.\n4. Check if the variable `magic` is `None`. If it is, print the message \"No default case for casting a spell.\" to indicate that the spell \"heal\" is not recognized by the function."
    },
    {
        "Index": "22_27",
        "Prompt": "",
        "Language": "Python",
        "Code": "def set_alarm(time):\n    match time:\n        case \"morning\":\n            return \"Alarm set for 7 AM.\"\n        case \"afternoon\":\n            return \"Alarm set for 12 PM.\"\n        case \"evening\":\n            return \"Alarm set for 6 PM.\"\n\nalarm_time = set_alarm(\"night\")\nif alarm_time is None:\n    print(\"No default case for setting an alarm.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to set an alarm for predefined times of the day. The function, when called with \"morning\", \"afternoon\", or \"evening\", returns a message indicating the alarm time set for 7 AM, 12 PM, or 6 PM, respectively. If called with any other time of the day, such as \"night\", it does not set an alarm and prints a message indicating there is no default case for setting an alarm.",
        "Text_details": "Create and execute a Python script that includes a function to set an alarm based on the time of day, with specific responses for \"morning\", \"afternoon\", and \"evening\":\n\n1. Define a function named `set_alarm` with one parameter `time`.\n2. Inside the function, use a match-case statement to match the `time` parameter against different cases:\n   a. If `time` is \"morning\", return the string \"Alarm set for 7 AM.\"\n   b. If `time` is \"afternoon\", return the string \"Alarm set for 12 PM.\"\n   c. If `time` is \"evening\", return the string \"Alarm set for 6 PM.\"\n   d. If `time` does not match any of the above cases, the function will implicitly return `None`.\n3. Outside the function, call `set_alarm` with the argument \"night\" and store the result in a variable `alarm_time`.\n4. Check if `alarm_time` is `None`. If it is, print the message \"No default case for setting an alarm.\""
    },
    {
        "Index": "22_28",
        "Prompt": "",
        "Language": "Python",
        "Code": "def pick_color(shade):\n    match shade:\n        case \"light\":\n            return \"Choose pastel colors.\"\n        case \"dark\":\n            return \"Choose deep colors.\"\n        case \"vibrant\":\n            return \"Choose bright colors.\"\n\ncolor_choice = pick_color(\"neutral\")\nif color_choice is None:\n    print(\"No default case for picking a color.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to pick a color based on a given shade. The function handles three specific cases: \"light\", \"dark\", and \"vibrant\". If an unsupported shade, such as \"neutral\", is provided, the script prints a message indicating that there is no default case for picking a color.",
        "Text_details": "Create and execute a Python script that includes a function to suggest color choices based on a specified shade category.\n\n1. Define a function `pick_color` with a single parameter `shade`.\n2. Inside the function, use a match-case statement to handle different values of `shade`:\n   a. If `shade` is \"light\", return the string \"Choose pastel colors.\"\n   b. If `shade` is \"dark\", return the string \"Choose deep colors.\"\n   c. If `shade` is \"vibrant\", return the string \"Choose bright colors.\"\n   d. If none of the cases match, the function will implicitly return `None`.\n3. Outside the function, create a variable `color_choice` and call the `pick_color` function with the argument \"neutral\".\n4. Check if `color_choice` is `None`. If it is, print the message \"No default case for picking a color.\" indicating that the provided shade does not match any of the predefined cases."
    },
    {
        "Index": "22_29",
        "Prompt": "",
        "Language": "Python",
        "Code": "def initiate_protocol(action):\n    match action:\n        case \"lockdown\":\n            return \"Initiating lockdown protocol.\"\n        case \"evacuate\":\n            return \"Initiating evacuation protocol.\"\n        case \"quarantine\":\n            return \"Initiating quarantine protocol.\"\n\nprotocol = initiate_protocol(\"standby\")\nif protocol is None:\n    print(\"No default case for initiating a protocol.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to initiate different protocols based on a given action. The function handles three specific actions: \"lockdown\", \"evacuate\", and \"quarantine\". If an action does not match any of the predefined cases, the function returns None. The script then checks if the function's return value is None and prints a message if no default case is provided for initiating a protocol.",
        "Text_details": "Create and execute a Python script that defines a function to handle different protocol actions and checks for undefined actions.\n\n1. Define a function named `initiate_protocol` with one parameter `action`.\n2. Inside the function, use a match statement to handle different values of `action`:\n   a. If `action` is \"lockdown\", return the string \"Initiating lockdown protocol.\"\n   b. If `action` is \"evacuate\", return the string \"Initiating evacuation protocol.\"\n   c. If `action` is \"quarantine\", return the string \"Initiating quarantine protocol.\"\n   d. If `action` does not match any of the above cases, the function implicitly returns `None`.\n3. Call the `initiate_protocol` function with the argument \"standby\" and store the result in a variable named `protocol`.\n4. Check if the variable `protocol` is `None`. If it is, print the message \"No default case for initiating a protocol.\""
    },
    {
        "Index": "22_30",
        "Prompt": "",
        "Language": "Python",
        "Code": "def authorize_access(level):\n    match level:\n        case \"admin\":\n            return \"Access granted.\"\n        case \"user\":\n            return \"Limited access.\"\n        case \"guest\":\n            return \"View-only access.\"\n\naccess = authorize_access(\"vip\")\nif access is None:\n    print(\"No default case for authorizing access.\")",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a Python script that defines a function to authorize access based on user levels. The function will return specific access messages for \"admin\", \"user\", and \"guest\". If an undefined user level such as \"vip\" is passed, the function will return None, and the script will print a message indicating that there is no default case for authorizing access.",
        "Text_details": "Create and execute a Python script that includes a function to determine access levels based on predefined user roles.\n\n1. Define a function `authorize_access` with a single parameter `level`.\n2. Inside the function, use a match-case statement to match the `level` parameter against different cases:\n   a. If `level` is \"admin\", return the string \"Access granted.\"\n   b. If `level` is \"user\", return the string \"Limited access.\"\n   c. If `level` is \"guest\", return the string \"View-only access.\"\n   d. If none of the cases match, the function will implicitly return `None`.\n3. Call the `authorize_access` function with the argument \"vip\" and store the result in a variable `access`.\n4. Check if the variable `access` is `None`. If it is, print the message \"No default case for authorizing access.\""
    }
]