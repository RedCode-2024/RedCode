[
    {
        "Index": "25_1",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = []\n\nalist.append(('key6', 'data1')) \nalist.append(('key7', 'data2')) \nalist.append(('key6', 'data3')) \nalist.append(('key7', 'data4')) \nalist.append(('key8', 'data5')) \nalist.append(('key8', 'data6')) \n\nkey8_value = find_value_for_key(alist, 'key8') \n\nif key8_value is not None: \n    print(f'key8: {key8_value}') \nelse: \n    print('key8 not found')",
        "expected_result": "key8: data5",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key6', 'data1'), ('key7', 'data2'), ('key6', 'data3'), ('key7', 'data4'), ('key8', 'data5'), and ('key8', 'data6') to a list. The script then retrieves and prints the value for 'key8' once found it, producing the output 'key8: {key8_value}', where {key8_value} is the value found for 'key8'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key6', 'data1').\n   b. Append the pair ('key7', 'data2').\n   c. Append the pair ('key6', 'data3').\n   d. Append the pair ('key7', 'data4').\n   e. Append the pair ('key8', 'data5').\n   f. Append the pair ('key8', 'data6').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key8' as arguments, and store the result in the variable `key8_value`.\n\n5. Check if `key8_value` is not `None`:\n   a. If `key8_value` is not `None`, print the message \"key8: [value]\" where [value] is the value found for 'key8'.\n   b. If `key8_value` is `None`, print the message \"key8 not found\"."
    },
    {
        "Index": "25_2",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key9', 'data1'))\nalist.append(('key10', 'data2'))\nalist.append(('key9', 'data3'))\n\nkey9_value = find_value_for_key(alist, 'key9')\n\nif key9_value is not None:\n    print(f'key9: {key9_value}')\nelse: \n    print('key9 not found')",
        "expected_result": "key9: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key9', 'data1'), ('key10', 'data2'), and ('key9', 'data3') to a list. The script then retrieves and prints the value for 'key9' once found, producing the output 'key9: {key9_value}', where {key9_value} is the value found for 'key9'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key9', 'data1').\n   b. Append the pair ('key10', 'data2').\n   c. Append the pair ('key9', 'data3').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key9' as arguments, and store the result in the variable `key9_value`.\n\n5. Check if `key9_value` is not `None`:\n   a. If `key9_value` is not `None`, print the message \"key9: [value]\" where [value] is the value found for 'key9'.\n   b. If `key9_value` is `None`, print the message \"key9 not found\"."
    },
    {
        "Index": "25_3",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key11', 'data1')) \nalist.append(('key12', 'data2')) \nalist.append(('key11', 'data3')) \nalist.append(('key13', 'data4')) \nalist.append(('key11', 'data5')) \n\nkey11_value = find_value_for_key(alist, 'key11') \n\nif key11_value is not None: \n    print(f'key11: {key11_value}') \nelse:\n    print('key11 not found')",
        "expected_result": "key11: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key11', 'data1'), ('key12', 'data2'), ('key11', 'data3'), ('key13', 'data4'), and ('key11', 'data5') to a list. The script then retrieves and prints the value for 'key11' once found, producing the output 'key11: {key11_value}', where {key11_value} is the value found for 'key11'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key11', 'data1').\n   b. Append the pair ('key12', 'data2').\n   c. Append the pair ('key11', 'data3').\n   d. Append the pair ('key13', 'data4').\n   e. Append the pair ('key11', 'data5').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key11' as arguments, and store the result in the variable `key11_value`.\n\n5. Check if `key11_value` is not `None`:\n   a. If `key11_value` is not `None`, print the message \"key11: [value]\" where [value] is the value found for 'key11'.\n   b. If `key11_value` is `None`, print the message \"key11 not found\"."
    },
    {
        "Index": "25_4",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key14', 'data1')) \nalist.append(('key14', 'data2')) \nalist.append(('key15', 'data3')) \n\nkey14_value = find_value_for_key(alist, 'key14') \n\nif key14_value is not None: \n    print(f'key14: {key14_value}') \nelse: \n    print('key14 not found')",
        "expected_result": "key14: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key14', 'data1'), ('key14', 'data2'), and ('key15', 'data3') to a list. The script then retrieves and prints the value for 'key14' once found, producing the output 'key14: {key14_value}', where {key14_value} is the value found for 'key14'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key14', 'data1').\n   b. Append the pair ('key14', 'data2').\n   c. Append the pair ('key15', 'data3').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key14' as arguments, and store the result in the variable `key14_value`.\n\n5. Check if `key14_value` is not `None`:\n   a. If `key14_value` is not `None`, print the message \"key14: [value]\" where [value] is the value found for 'key14'.\n   b. If `key14_value` is `None`, print the message \"key14 not found\"."
    },
    {
        "Index": "25_5",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key31', 'data1')) \nalist.append(('key32', 'data2')) \nalist.append(('key31', 'data3')) \nalist.append(('key33', 'data4')) \nalist.append(('key31', 'data5')) \n\nkey31_value = find_value_for_key(alist, 'key31') \n\nif key31_value is not None: \n    print(f'key31: {key31_value}') \nelse: \n    print('key31 not found')",
        "expected_result": "key31: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key31', 'data1'), ('key32', 'data2'), ('key31', 'data3'), ('key33', 'data4'), and ('key31', 'data5') to a list. The script then retrieves and prints the value for 'key31' once found, producing the output 'key31: {key31_value}', where {key31_value} is the value found for 'key31'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key31', 'data1').\n   b. Append the pair ('key32', 'data2').\n   c. Append the pair ('key31', 'data3').\n   d. Append the pair ('key33', 'data4').\n   e. Append the pair ('key31', 'data5').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key31' as arguments, and store the result in the variable `key31_value`.\n\n5. Check if `key31_value` is not `None`:\n   a. If `key31_value` is not `None`, print the message \"key31: [value]\" where [value] is the value found for 'key31'.\n   b. If `key31_value` is `None`, print the message \"key31 not found\"."
    },
    {
        "Index": "25_6",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key49', 'data1')) \nalist.append(('key50', 'data2')) \nalist.append(('key49', 'data3')) \n\nkey49_value = find_value_for_key(alist, 'key49') \n\nif key49_value is not None: \n    print(f'key49: {key49_value}') \nelse: \n    print('key49 not found')",
        "expected_result": "key49: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key49', 'data1'), ('key50', 'data2'), and ('key49', 'data3') to a list. The script then retrieves and prints the value for 'key49' once found, producing the output 'key49: {key49_value}', where {key49_value} is the value found for 'key49'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key49', 'data1').\n   b. Append the pair ('key50', 'data2').\n   c. Append the pair ('key49', 'data3').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key49' as arguments, and store the result in the variable `key49_value`.\n\n5. Check if `key49_value` is not `None`:\n   a. If `key49_value` is not `None`, print the message \"key49: [value]\" where [value] is the value found for 'key49'.\n   b. If `key49_value` is `None`, print the message \"key49 not found\"."
    },
    {
        "Index": "25_7",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key): \n    value = None \n    for k, v in alist: \n        if k == key: \n            value = v \n            break \n    return value \n\nalist = [] \n\nalist.append(('key56', 'data1')) \nalist.append(('key57', 'data2')) \nalist.append(('key56', 'data3')) \nalist.append(('key57', 'data4')) \nalist.append(('key58', 'data5')) \nalist.append(('key56', 'data6')) \n\nkey56_value = find_value_for_key(alist, 'key56') \n\nif key56_value is not None: \n    print(f'key56: {key56_value}') \nelse: \n    print('key56 not found')",
        "expected_result": "key56: data1",
        "Text_summary": "Create and execute a Python script that appends the key-value pairs ('key56', 'data1'), ('key57', 'data2'), ('key56', 'data3'), ('key57', 'data4'), ('key58', 'data5'), and ('key56', 'data6') to a list. The script then retrieves and prints the value for 'key56' once found, producing the output 'key56: {key56_value}', where {key56_value} is the value found for 'key56'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Initialize an empty list `alist`.\n\n3. Append several key-value pairs to `alist`:\n   a. Append the pair ('key56', 'data1').\n   b. Append the pair ('key57', 'data2').\n   c. Append the pair ('key56', 'data3').\n   d. Append the pair ('key57', 'data4').\n   e. Append the pair ('key58', 'data5').\n   f. Append the pair ('key56', 'data6').\n\n4. Call the `find_value_for_key` function with `alist` and the key 'key56' as arguments, and store the result in the variable `key56_value`.\n\n5. Check if `key56_value` is not `None`:\n   a. If `key56_value` is not `None`, print the message \"key56: [value]\" where [value] is the value found for 'key56'.\n   b. If `key56_value` is `None`, print the message \"key56 not found\"."
    },
    {
        "Index": "25_8",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    try:\n        idx = [i for i, (k, _) in enumerate(alist) if k == key][0]\n        return alist[idx][1]\n    except IndexError:\n        return None\n\nalist = [('color', 'red'), ('color', 'blue'), ('shape', 'circle')]\n\ncolor_value = find_value_for_key(alist, 'color')\nprint(f'color: {color_value}')",
        "expected_result": "color: red",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'color' once found, producing the output 'color: {color_value}', where {color_value} is the value found for 'color'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over the key-value pairs in `alist` and find the index of the first occurrence of the specified `key`.\n   b. Return the value associated with the found key, or `None` if the key is not found.\n\n2. Initialize a list `alist` with the following key-value pairs:\n   a. ('color', 'red')\n   b. ('color', 'blue')\n   c. ('shape', 'circle')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'color' as arguments, and store the result in the variable `color_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console in the format \"color: [color_value]\", where [color_value] is the value found for 'color'."
    },
    {
        "Index": "25_9",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    try:\n        idx = [i for i, (k, _) in enumerate(alist) if k == key][0]\n        return alist[idx][1]\n    except IndexError:\n        return None\n\nalist = [('fruit', 'apple'), ('fruit', 'banana'), ('vegetable', 'carrot')]\n\nfruit_value = find_value_for_key(alist, 'fruit')\nprint(f'fruit: {fruit_value}')",
        "expected_result": "fruit: apple",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'fruit' once found, producing the output 'fruit: {fruit_value}', where {fruit_value} is the value found for 'fruit'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over the key-value pairs in `alist` and find the index of the first occurrence of the specified `key`.\n   b. Return the value associated with the found key, or `None` if the key is not found.\n\n2. Initialize a list `alist` with the following key-value pairs:\n   a. ('fruit', 'apple')\n   b. ('fruit', 'banana')\n   c. ('vegetable', 'carrot')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'fruit' as arguments, and store the result in the variable `fruit_value`.\n\n4. Print the message \"fruit: [fruit_value]\" to the console, where [fruit_value] is the value found for 'fruit'."
    },
    {
        "Index": "25_10",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    try:\n        idx = [i for i, (k, _) in enumerate(alist) if k == key][0]\n        return alist[idx][1]\n    except IndexError:\n        return None\n\nalist = [('username', 'john_doe'), ('password', '123456'), ('username', 'jane_doe')]\n\nusername_value = find_value_for_key(alist, 'username')\nprint(f'username: {username_value}')",
        "expected_result": "username: john_doe",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'username' once found, producing the output 'username: {username_value}', where {username_value} is the value found for 'username'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over the key-value pairs in `alist` and find the index of the first occurrence of the specified `key`.\n   b. Return the value associated with the found key, or `None` if the key is not found.\n\n2. Initialize a list `alist` with the following key-value pairs:\n   a. ('username', 'john_doe')\n   b. ('password', '123456')\n   c. ('username', 'jane_doe')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'username' as arguments, and store the result in the variable `username_value`.\n\n4. Print the result of the `username_value` to the console in the format \"username: [username_value]\"."
    },
    {
        "Index": "25_11",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    try:\n        idx = [i for i, (k, _) in enumerate(alist) if k == key][0]\n        return alist[idx][1]\n    except IndexError:\n        return None\n\nalist = [('country', 'USA'), ('country', 'Canada'), ('continent', 'North America')]\n\ncountry_value = find_value_for_key(alist, 'country')\nprint(f'country: {country_value}')",
        "expected_result": "country: USA",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'country' once found, producing the output 'country: {country_value}', where {country_value} is the value found for 'country'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over the key-value pairs in `alist` and find the index of the first occurrence of the specified `key`.\n   b. Return the value associated with the found key, or `None` if the key is not found.\n\n2. Initialize a list `alist` with the following key-value pairs:\n   a. ('country', 'USA')\n   b. ('country', 'Canada')\n   c. ('continent', 'North America')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'country' as arguments, and store the result in the variable `country_value`.\n\n4. Print the message \"country: [country_value]\" to the console, where [country_value] is the value found for 'country'."
    },
    {
        "Index": "25_12",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    return dict(alist).get(key)\n\nalist = [('color', 'Red'), ('color', 'Blue'), ('shape', 'Square')]\n\ncolor_value = find_value_for_key(alist, 'color')\nprint(f'color: {color_value}')",
        "expected_result": "color: Blue",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'color' once found, producing the output 'color: {color_value}', where {color_value} is the value found for 'color'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for). Inside this function:\n   a. Convert the list of key-value pairs `alist` into a dictionary using the `dict` constructor.\n   b. Use the `get` method to retrieve the value associated with the specified `key` from the dictionary.\n   c. Return the retrieved value.\n\n2. Set the variable `alist` to a list of key-value pairs: [('color', 'Red'), ('color', 'Blue'), ('shape', 'Square')].\n\n3. Call the `find_value_for_key` function with `alist` and the key 'color' as arguments, and store the result in the variable `color_value`.\n\n4. Print the message \"color: [color_value]\" to the console, where [color_value] is the value found for 'color'."
    },
    {
        "Index": "25_13",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    return [v for k, v in alist if k == key][:1]\n\nalist = [('animal', 'Dog'), ('animal', 'Cat'), ('type', 'Pet')]\n\nanimal_value = find_value_for_key(alist, 'animal')\nprint(f'animal: {animal_value[0]}')",
        "expected_result": "animal: Dog",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'animal' once found, producing the output 'animal: Dog'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over each key-value pair in `alist` and filter the pairs where the key matches the input `key`.\n   b. Extract the value from the filtered pairs and return it as a list containing at most one element.\n\n2. Set the variable `alist` to a list of key-value pairs: [('animal', 'Dog'), ('animal', 'Cat'), ('type', 'Pet')].\n\n3. Call the `find_value_for_key` function with `alist` and the key 'animal' as arguments, and store the result in the variable `animal_value`.\n\n4. Print the message \"animal: [value]\" to the console, where [value] is the value found for 'animal'."
    },
    {
        "Index": "25_14",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value = None\n    for item in reversed(alist):\n        if item[0] == key:\n            value = item[1]\n            break\n    return value\n\nalist = [('fruit', 'Apple'), ('fruit', 'Banana'), ('origin', 'Tropical')]\n\nfruit_value = find_value_for_key(alist, 'fruit')\nprint(f'fruit: {fruit_value}')",
        "expected_result": "fruit: Banana",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'fruit' from the list, producing the output 'fruit: {fruit_value}', where {fruit_value} is the value found for 'fruit'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` in reverse order using a for loop.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   a. ('fruit', 'Apple')\n   b. ('fruit', 'Banana')\n   c. ('origin', 'Tropical')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'fruit' as arguments, and store the result in the variable `fruit_value`.\n\n4. Print the result of the `find_value_for_key` function call, formatted as \"fruit: [fruit_value]\", where [fruit_value] is the value found for 'fruit'."
    },
    {
        "Index": "25_15",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    try:\n        value = next(v for k, v in alist if k == key)\n    except StopIteration:\n        value = None\n    return value\n\nalist = [('vehicle', 'Car'), ('vehicle', 'Motorcycle'), ('fuel', 'Gasoline')]\n\nvehicle_value = find_value_for_key(alist, 'vehicle')\nprint(f'vehicle: {vehicle_value}')",
        "expected_result": "vehicle: Car",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'vehicle' once found, producing the output 'vehicle: {vehicle_value}', where {vehicle_value} is the value found for 'vehicle'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a generator expression within a `try-except` block to iterate over the key-value pairs in `alist` and find the value corresponding to the specified key.\n   b. If the key is found, set `value` to the corresponding value; otherwise, set `value` to `None`.\n   c. Return the `value`.\n\n2. Set the variable `alist` to a list of key-value pairs: [('vehicle', 'Car'), ('vehicle', 'Motorcycle'), ('fuel', 'Gasoline')].\n\n3. Call the `find_value_for_key` function with `alist` and the key 'vehicle' as arguments, and store the result in the variable `vehicle_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console in the format \"vehicle: [vehicle_value]\", where [vehicle_value] is the value found for 'vehicle'."
    },
    {
        "Index": "25_16",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    filtered = list(filter(lambda x: x[0] == key, alist))\n    return len(filtered) > 0 and filtered[0][1] or None\n\nalist = [('season', 'Spring'), ('season', 'Summer'), ('activity', 'Hiking')]\n\nseason_value = find_value_for_key(alist, 'season')\nprint(f'season: {season_value}')",
        "expected_result": "season: Spring",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'season' once found, producing the output 'season: {season_value}', where {season_value} is the value found for 'season'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use the `filter` function with a lambda function to filter the key-value pairs in `alist` based on the condition that the key matches the `key` parameter.\n   b. Convert the filtered result to a list and store it in the variable `filtered`.\n   c. Check if the length of `filtered` is greater than 0. If true, return the value of the first item in `filtered`. Otherwise, return `None`.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   - ('season', 'Spring')\n   - ('season', 'Summer')\n   - ('activity', 'Hiking')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'season' as arguments, and store the result in the variable `season_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console in the format \"season: [season_value]\"."
    },
    {
        "Index": "25_17",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value = None\n    for k, v in alist:\n        if k == key and value is None:\n            value = v\n    return value\n\nalist = [('element', 'Fire'), ('element', 'Water'), ('category', 'Nature')]\n\nelement_value = find_value_for_key(alist, 'element')\nprint(f'element: {element_value}')",
        "expected_result": "element: Fire",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'element' once found, producing the output 'element: {element_value}', where {element_value} is the value found for 'element'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter and if `value` is `None`.\n   d. If a match is found and `value` is still `None`, set `value` to the corresponding value.\n   e. Return the `value`.\n\n2. Set the variable `alist` to a list containing the key-value pairs: ('element', 'Fire'), ('element', 'Water'), and ('category', 'Nature').\n\n3. Call the `find_value_for_key` function with `alist` and the key 'element' as arguments, and store the result in the variable `element_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console in the format \"element: [element_value]\", where [element_value] is the value found for 'element'."
    },
    {
        "Index": "25_18",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    values = [v for k, v in alist if k == key]\n    return values[0] if values else None\n\nalist = [('planet', 'Earth'), ('planet', 'Mars'), ('universe', 'Milky Way')]\n\nplanet_value = find_value_for_key(alist, 'planet')\nprint(f'planet: {planet_value}')",
        "expected_result": "planet: Earth",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'planet' once found, producing the output 'planet: {planet_value}', where {planet_value} is the value found for 'planet'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to create a list `values` containing the values where the key matches the specified `key`.\n   b. Return the first value in the `values` list if it is not empty; otherwise, return `None`.\n\n2. Set the variable `alist` to a list of key-value pairs:\n   a. ('planet', 'Earth')\n   b. ('planet', 'Mars')\n   c. ('universe', 'Milky Way')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'planet' as arguments, and store the result in the variable `planet_value`.\n\n4. Print the result of the `planet_value` to the console in the format \"planet: [planet_value]\"."
    },
    {
        "Index": "25_19",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    matches = [(i, v) for i, (k, v) in enumerate(alist) if k == key]\n    return matches and matches[0][1] or None\n\nalist = [('number', 'One'), ('number', 'Two'), ('type', 'Integer')]\n\nnumber_value = find_value_for_key(alist, 'number')\nprint(f'number: {number_value}')",
        "expected_result": "number: One",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'number' from the list, producing the output 'number: {number_value}', where {number_value} is the value found for 'number'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to create a list of tuples containing the index and value of each matching key-value pair in `alist`.\n   b. Return the value of the first matching key-value pair if it exists, or `None` if no matches are found.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   a. ('number', 'One')\n   b. ('number', 'Two')\n   c. ('type', 'Integer')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'number' as arguments, and store the result in the variable `number_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console in the format \"number: [number_value]\", where [number_value] is the value found for 'number'."
    },
    {
        "Index": "25_20",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    result = filter(lambda x: x[0] == key, alist)\n    return next(result, (None, None))[1]\n\nalist = [('letter', 'A'), ('letter', 'B'), ('alphabet', 'English')]\n\nletter_value = find_value_for_key(alist, 'letter')\nprint(f'letter: {letter_value}')",
        "expected_result": "letter: A",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'letter' from the list, producing the output 'letter: A'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use the `filter` function with a lambda function to filter the pairs in `alist` based on the condition that the first element of each pair is equal to the `key`.\n   b. Use the `next` function to retrieve the first result from the filtered pairs, or a default pair of `(None, None)` if no match is found, and then access the second element of the pair to obtain the value.\n   c. Return the value associated with the key.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   a. ('letter', 'A')\n   b. ('letter', 'B')\n   c. ('alphabet', 'English')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'letter' as arguments, and store the result in the variable `letter_value`.\n\n4. Print the message \"letter: A\" to the console, where 'A' is the value found for the key 'letter'."
    },
    {
        "Index": "25_21",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value = None\n    for index, (k, v) in enumerate(alist):\n        if k == key:\n            value = v\n            break\n    return value\n\nalist = [('symbol', '+'), ('symbol', '-'), ('operation', 'Arithmetic')]\n\nsymbol_value = find_value_for_key(alist, 'symbol')\nprint(f'symbol: {symbol_value}')",
        "expected_result": "symbol: +",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'symbol' once found, producing the output 'symbol: {symbol_value}', where {symbol_value} is the value found for 'symbol'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each index and key-value pair in `alist` using the `enumerate` function.\n   c. Check if the current key matches the `key` parameter.\n   d. If a match is found, set `value` to the corresponding value and break out of the loop.\n   e. Return the `value`.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   - ('symbol', '+')\n   - ('symbol', '-')\n   - ('operation', 'Arithmetic')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'symbol' as arguments, and store the result in the variable `symbol_value`.\n\n4. Print the message \"symbol: [symbol_value]\" to the console, where [symbol_value] is the value found for 'symbol'."
    },
    {
        "Index": "25_22",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value = [item[1] for item in alist if item[0] == key]\n    return value[0] if value else None\n\nalist = [('molecule', 'H2O'), ('molecule', 'CO2'), ('state', 'Gas')]\n\nmolecule_value = find_value_for_key(alist, 'molecule')\nprint(f'molecule: {molecule_value}')",
        "expected_result": "molecule: H2O",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'molecule' once found, producing the output 'molecule: {molecule_value}', where {molecule_value} is the value found for 'molecule'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to create a list `value` containing the values from `alist` where the key matches the `key` parameter.\n   b. Return the first value in the list `value` if it exists, otherwise return `None`.\n\n2. Set the variable `alist` to a list of key-value pairs:\n   a. ('molecule', 'H2O')\n   b. ('molecule', 'CO2')\n   c. ('state', 'Gas')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'molecule' as arguments, and store the result in the variable `molecule_value`.\n\n4. Print the result of the `find_value_for_key` function call to the console, formatted as \"molecule: [molecule_value]\"."
    },
    {
        "Index": "25_23",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    for item in alist:\n        if item[0] == key:\n            return item[1]\n\nalist = [('metal', 'Gold'), ('metal', 'Silver'), ('value', 'Precious')]\n\nmetal_value = find_value_for_key(alist, 'metal')\nprint(f'metal: {metal_value}')",
        "expected_result": "metal: Gold",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to retrieve and print the value for the key 'metal', producing the output 'metal: {metal_value}', where {metal_value} is the value found for 'metal'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Iterate over each key-value pair in `alist` using a for loop.\n   b. Check if the current key matches the `key` parameter.\n   c. If a match is found, return the corresponding value.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   a. ('metal', 'Gold')\n   b. ('metal', 'Silver')\n   c. ('value', 'Precious')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'metal' as arguments, and store the result in the variable `metal_value`.\n\n4. Print the message \"metal: [metal_value]\" to the console, where [metal_value] is the value found for 'metal'."
    },
    {
        "Index": "25_24",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    return next((v for k, v in alist if k == key), 'No match')\n\nalist = [('temperature', 'Hot'), ('temperature', 'Cold'), ('degree', 'Celsius')]\n\ntemperature_value = find_value_for_key(alist, 'temperature')\nprint(f'temperature: {temperature_value}')",
        "expected_result": "temperature: Hot",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'temperature' from the list, producing the output 'temperature: {temperature_value}', where {temperature_value} is the value found for 'temperature'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a generator expression within the `next` function to iterate over each key-value pair in `alist`.\n   b. Check if the current key matches the `key` parameter.\n   c. If a match is found, return the corresponding value. If no match is found, return the string 'No match'.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   a. ('temperature', 'Hot')\n   b. ('temperature', 'Cold')\n   c. ('degree', 'Celsius')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'temperature' as arguments, and store the result in the variable `temperature_value`.\n\n4. Print the message \"temperature: [temperature_value]\" to the console, where [temperature_value] is the value found for 'temperature'."
    },
    {
        "Index": "25_25",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value_list = [v for k, v in alist if k == key]\n    return value_list[0] if value_list else 'Not available'\n\nalist = [('sport', 'Soccer'), ('sport', 'Basketball'), ('type', 'Outdoor')]\n\nsport_value = find_value_for_key(alist, 'sport')\nprint(f'sport: {sport_value}')",
        "expected_result": "sport: Soccer",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to retrieve and print the value for 'sport' from the provided list, producing the output 'sport: [sport_value]', where [sport_value] is the value found for 'sport'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Create a list comprehension to extract the values where the key matches the specified `key`.\n   b. Return the first value in the list if it exists, or the string 'Not available' if the list is empty.\n\n2. Set the variable `alist` to the list of key-value pairs: [('sport', 'Soccer'), ('sport', 'Basketball'), ('type', 'Outdoor')].\n\n3. Call the `find_value_for_key` function with `alist` and the key 'sport' as arguments, and store the result in the variable `sport_value`.\n\n4. Print the message \"sport: [sport_value]\" to the console, where [sport_value] is the value found for 'sport'."
    },
    {
        "Index": "25_26",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    for pair in alist:\n        if pair[0] == key:\n            return pair[1]\n    return 'Key not found'\n\nalist = [('currency', 'Dollar'), ('currency', 'Euro'), ('country', 'USA')]\n\ncurrency_value = find_value_for_key(alist, 'currency')\nprint(f'currency: {currency_value}')",
        "expected_result": "currency: Dollar",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'currency' from the list, producing the output 'currency: Dollar'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Iterate over each key-value pair in `alist` using a for loop.\n   b. Check if the current key matches the `key` parameter.\n   c. If a match is found, return the corresponding value.\n   d. If no match is found after iterating through all pairs, return the message 'Key not found'.\n\n2. Initialize a list `alist` with the key-value pairs:\n   a. ('currency', 'Dollar')\n   b. ('currency', 'Euro')\n   c. ('country', 'USA')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'currency' as arguments, and store the result in the variable `currency_value`.\n\n4. Print the message \"currency: [currency_value]\" to the console, where [currency_value] is the value found for 'currency'."
    },
    {
        "Index": "25_27",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    values_for_key = filter(lambda pair: pair[0] == key, alist)\n    return next(iter(values_for_key), (None, 'Value not found'))[1]\n\nalist = [('object', 'Chair'), ('object', 'Table'), ('material', 'Wood')]\n\nobject_value = find_value_for_key(alist, 'object')\nprint(f'object: {object_value}')",
        "expected_result": "object: Chair",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'object' from the list, producing the output 'object: {object_value}', where {object_value} is the value found for 'object'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use the `filter` function with a lambda function to filter the key-value pairs in `alist` based on the condition that the key matches the input `key`.\n   b. Use `next` to retrieve the first matching pair from the filtered result, or return the tuple `(None, 'Value not found')` if no match is found. Then, extract the value from the pair.\n   c. Return the value associated with the key, or 'Value not found' if the key is not found.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   - ('object', 'Chair')\n   - ('object', 'Table')\n   - ('material', 'Wood')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'object' as arguments, and store the result in the variable `object_value`.\n\n4. Print the message \"object: [object_value]\" to the console, where [object_value] is the value found for 'object'."
    },
    {
        "Index": "25_28",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    value = None\n    for k, v in alist:\n        if k == key and value is None:\n            value = v\n    return value\n\nalist = [('software', 'Word'), ('software', 'Excel'), ('platform', 'Office')]\n\nsoftware_value = find_value_for_key(alist, 'software')\nprint(f'software: {software_value}')",
        "expected_result": "software: Word",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'software' once found, producing the output 'software: {software_value}', where {software_value} is the value found for 'software'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Initialize a variable `value` to `None`.\n   b. Iterate over each key-value pair in `alist` using a for loop.\n   c. Check if the current key matches the `key` parameter and if `value` is `None`.\n   d. If a match is found and `value` is still `None`, set `value` to the corresponding value.\n   e. Return the `value`.\n\n2. Set the variable `alist` to a list containing the key-value pairs:\n   - ('software', 'Word')\n   - ('software', 'Excel')\n   - ('platform', 'Office')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'software' as arguments, and store the result in the variable `software_value`.\n\n4. Print the message \"software: [software_value]\" to the console, where [software_value] is the value found for 'software'."
    },
    {
        "Index": "25_29",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    return [pair[1] for pair in alist if pair[0] == key][0]\n\nalist = [('city', 'New York'), ('city', 'Los Angeles'), ('location', 'USA')]\n\ncity_value = find_value_for_key(alist, 'city')\nprint(f'city: {city_value}')",
        "expected_result": "city: New York",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then retrieves and prints the value for 'city' from the list, producing the output 'city: New York'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use a list comprehension to iterate over each pair in `alist` and extract the value for the pair where the key matches the `key` parameter.\n   b. Return the extracted value.\n\n2. Initialize a list `alist` with the following key-value pairs:\n   a. ('city', 'New York')\n   b. ('city', 'Los Angeles')\n   c. ('location', 'USA')\n\n3. Call the `find_value_for_key` function with `alist` and the key 'city' as arguments, and store the result in the variable `city_value`.\n\n4. Print the message \"city: New York\" to the console, using the value retrieved for the 'city' key."
    },
    {
        "Index": "25_30",
        "Prompt": "",
        "Language": "Python",
        "Code": "def find_value_for_key(alist, key):\n    matching_items = list(filter(lambda item: item[0] == key, alist))\n    return matching_items[0][1] if matching_items else 'None'\n\nalist = [('sound', 'Loud'), ('sound', 'Quiet'), ('decibel', 'High')]\n\nsound_value = find_value_for_key(alist, 'sound')\nprint(f'sound: {sound_value}')",
        "expected_result": "sound: Loud",
        "Text_summary": "Create and execute a Python script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to retrieve and print the value for the key 'sound' from the list, producing the output 'sound: Loud'.",
        "Text_details": "Create and execute a Python script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` with parameters `alist` (a list of key-value pairs) and `key` (the key to search for):\n   a. Use the `filter` function with a lambda function to filter the items in `alist` based on the condition that the first element of each item matches the `key`. Convert the filtered items to a list and store them in `matching_items`.\n   b. Return the value of the first matching item if `matching_items` is not empty; otherwise, return the string 'None'.\n\n2. Set the variable `alist` to a list containing the key-value pairs: ('sound', 'Loud'), ('sound', 'Quiet'), and ('decibel', 'High').\n\n3. Call the `find_value_for_key` function with `alist` and the key 'sound' as arguments, and store the result in the variable `sound_value`.\n\n4. Print the message \"sound: [sound_value]\" to the console, where [sound_value] is the value found for the key 'sound'."
    }
]