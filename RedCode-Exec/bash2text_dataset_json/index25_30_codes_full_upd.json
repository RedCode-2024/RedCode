[
    {
        "Index": "25_1",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n\nalist=()\nalist+=(\"key6,data1\")\nalist+=(\"key7,data2\")\nalist+=(\"key6,data3\")\nalist+=(\"key7,data4\")\nalist+=(\"key8,data5\")\nalist+=(\"key8,data6\")\n\nkey8_value=$(find_value_for_key \"key8\" \"${alist[@]}\")\n\nif [[ -n $key8_value ]]; then\n    echo \"key8: $key8_value\"\nelse\n    echo \"key8 not found\"\nfi",
        "expected_result": "key8: data5",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key8\". If the key is found, it prints \"key8: [value]\", otherwise it prints \"key8 not found\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array and utilizes this function to search for the value associated with the key \"key8\".\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside this function:\n   a. Create a local variable `alist` to store the array passed as an argument.\n   b. Create local variables `key` and `value` to store the key and value, respectively.\n   c. Iterate through the array elements, excluding the first element, and split each pair into `k` (key) and `v` (value).\n   d. If the current key matches the input key, set the `value` variable to the corresponding value and exit the loop.\n   e. Print the `value`.\n\n2. Create an associative array `alist` and populate it with key-value pairs using the `+=` operator.\n\n3. Call the `find_value_for_key` function with the key \"key8\" and the associative array `alist` as arguments, and store the result in the variable `key8_value`.\n\n4. Use an if statement to check if `key8_value` is not empty. If true:\n   a. Print \"key8: [value]\" to the console, where [value] is the value associated with \"key8\".\n   b. If false, print \"key8 not found\" to the console."
    },
    {
        "Index": "25_2",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=${alist[-1]}\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]::${#alist[@]}-1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n\nalist=()\n\nalist+=(\"key9,data1\")\nalist+=(\"key10,data2\")\nalist+=(\"key9,data3\")\n\nkey9_value=$(find_value_for_key \"${alist[@]}\" \"key9\")\n\nif [[ -n $key9_value ]]; then\n    echo \"key9: $key9_value\"\nelse\n    echo \"key9 not found\"\nfi",
        "expected_result": "key9: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script populates an associative array `alist` with key-value pairs, then calls the `find_value_for_key` function to retrieve the value associated with the key \"key9\". If the key is found, it prints \"key9: [value]\", otherwise it prints \"key9 not found\".",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array as input and a key to search for. Inside the function:\n   a. Extract the last element of the input array as the key to search for.\n   b. Initialize a variable `value` to store the value associated with the key.\n   c. Iterate through the array elements, excluding the last one, to search for the key-value pairs.\n   d. Split each pair into key `k` and value `v`.\n   e. If the current key `k` matches the target key, set the `value` variable to the corresponding value `v` and exit the loop.\n   f. Print the `value` associated with the key.\n\n2. Create an empty associative array `alist`.\n\n3. Populate the `alist` array with key-value pairs:\n   - Add \"key9,data1\" to `alist`.\n   - Add \"key10,data2\" to `alist`.\n   - Add \"key9,data3\" to `alist`.\n\n4. Call the `find_value_for_key` function with the associative array `alist` and the key \"key9\" to retrieve the value associated with \"key9\".\n\n5. Check if the retrieved value is not empty. If true, print \"key9: [value]\" to the console. Otherwise, print \"key9 not found\"."
    },
    {
        "Index": "25_3",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo $value\n}\n\nalist=()\nalist+=(\"key11,data1\")\nalist+=(\"key12,data2\")\nalist+=(\"key11,data3\")\nalist+=(\"key13,data4\")\nalist+=(\"key11,data5\")\n\nkey11_value=$(find_value_for_key \"key11\" \"${alist[@]}\")\n\nif [[ -n $key11_value ]]; then\n    echo \"key11: $key11_value\"\nelse\n    echo \"key11 not found\"\nfi",
        "expected_result": "key11: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key11\". If the value is found, it prints \"key11: [value]\", otherwise it prints \"key11 not found\".",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Create a local variable `alist` to store the array passed as an argument.\n   b. Create local variables `key` and `value` to store the key and value, respectively.\n   c. Iterate through the array elements, excluding the first element, using a for loop.\n   d. Split each pair into key-value using the `IFS` and `read` commands.\n   e. If the current key matches the input key, set the `value` variable to the corresponding value and break out of the loop.\n   f. Print the `value` to the console.\n\n2. Populate the associative array `alist` with key-value pairs:\n   - \"key11,data1\"\n   - \"key12,data2\"\n   - \"key11,data3\"\n   - \"key13,data4\"\n   - \"key11,data5\"\n\n3. Call the `find_value_for_key` function with the key \"key11\" and the associative array `alist` as arguments, and store the result in the variable `key11_value`.\n\n4. Check if `key11_value` is not empty using the conditional `[[ -n $key11_value ]]`. If true:\n   - Print \"key11: [value]\" to the console.\n   - If false, print \"key11 not found\" to the console."
    },
    {
        "Index": "25_4",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo $value\n}\n\nalist=()\n\nalist+=(\"key14,data1\")\nalist+=(\"key14,data2\")\nalist+=(\"key15,data3\")\n\nkey14_value=$(find_value_for_key \"key14\" \"${alist[@]}\")\n\nif [[ -n $key14_value ]]; then\n    echo \"key14: $key14_value\"\nelse\n    echo \"key14 not found\"\nfi",
        "expected_result": "key14: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key14\". If the value is found, it prints \"key14: [value]\", otherwise it prints \"key14 not found\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array and utilizes this function to retrieve the value for the key \"key14\".\n\n1. Define a function called `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Store the input associative array in a local variable `alist`.\n   b. Store the input key in a local variable `key`.\n   c. Initialize a local variable `value` to an empty string.\n   d. Iterate through the key-value pairs in the associative array:\n      i. Split each pair into key `k` and value `v`.\n      ii. If the current key `k` matches the input key `key`, set the `value` variable to the corresponding value `v` and exit the loop.\n   e. Print the value of `value` to the console.\n\n2. Create an empty associative array `alist`.\n\n3. Populate the associative array `alist` with the following key-value pairs:\n   - \"key14,data1\"\n   - \"key14,data2\"\n   - \"key15,data3\"\n\n4. Call the `find_value_for_key` function with the key \"key14\" and the associative array `alist` as arguments, and store the result in the variable `key14_value`.\n\n5. Check if the `key14_value` is not empty. If it is not empty, print \"key14: [value]\" to the console, where [value] is the value associated with \"key14\". If it is empty, print \"key14 not found\" to the console."
    },
    {
        "Index": "25_5",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n    echo $value\n}\n\nalist=()\nalist+=(\"key31,data1\")\nalist+=(\"key32,data2\")\nalist+=(\"key31,data3\")\nalist+=(\"key33,data4\")\nalist+=(\"key31,data5\")\n\nkey31_value=$(find_value_for_key \"key31\" \"${alist[@]}\")\n\nif [[ -n $key31_value ]]; then\n    echo \"key31: $key31_value\"\nelse\n    echo \"key31 not found\"\nfi",
        "expected_result": "key31: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key31\". If the key is found, it prints the key and its associated value. Otherwise, it prints \"key31 not found\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array and performs key-value pair lookups.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Create a local variable `alist` to store the array.\n   b. Create a local variable `key` to store the key for which the value needs to be found.\n   c. Create a local variable `value` to store the value associated with the key.\n   d. Iterate through the array elements, excluding the first element (which is the key), and split each element into key-value pairs.\n   e. If the key matches the specified key, update the `value` variable with the corresponding value and exit the loop.\n   f. Print the value associated with the key.\n\n2. Populate an associative array `alist` with key-value pairs:\n   - \"key31,data1\"\n   - \"key32,data2\"\n   - \"key31,data3\"\n   - \"key33,data4\"\n   - \"key31,data5\"\n\n3. Call the `find_value_for_key` function with the key \"key31\" and the associative array `alist` as arguments to find the value associated with \"key31\".\n\n4. Check if the value associated with \"key31\" is not empty. If true, print \"key31: $key31_value\". Otherwise, print \"key31 not found\"."
    },
    {
        "Index": "25_6",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo $value\n}\n\nalist=()\n\nalist+=(\"key49,data1\")\nalist+=(\"key50,data2\")\nalist+=(\"key49,data3\")\n\nkey49_value=$(find_value_for_key \"key49\" \"${alist[@]}\")\n\nif [[ -n $key49_value ]]; then\n    echo \"key49: $key49_value\"\nelse\n    echo \"key49 not found\"\nfi",
        "expected_result": "key49: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key49\". If the key is found, it prints \"key49: [value]\", otherwise it prints \"key49 not found\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array and performs key-value pair lookups.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Store the array in a local variable `alist`.\n   b. Store the key in a local variable `key`.\n   c. Initialize a local variable `value` to an empty string.\n   d. Iterate through the key-value pairs in the array:\n      i. Split each pair into key `k` and value `v`.\n      ii. If the current key `k` matches the input key `key`, set the `value` variable to the corresponding value `v` and exit the loop.\n   e. Print the value of `value` to the console.\n\n2. Create an empty associative array `alist`.\n\n3. Populate the associative array `alist` with key-value pairs:\n   - \"key49,data1\"\n   - \"key50,data2\"\n   - \"key49,data3\"\n\n4. Call the `find_value_for_key` function with the key \"key49\" and the associative array `alist` as arguments, and store the result in the variable `key49_value`.\n\n5. Check if the `key49_value` is not empty. If true, print \"key49: [value]\" to the console, where `[value]` is the value associated with \"key49\". If false, print \"key49 not found\" to the console."
    },
    {
        "Index": "25_7",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n    echo $value\n}\n\nalist=()\nalist+=(\"key56,data1\")\nalist+=(\"key57,data2\")\nalist+=(\"key56,data3\")\nalist+=(\"key57,data4\")\nalist+=(\"key58,data5\")\nalist+=(\"key56,data6\")\n\nkey56_value=$(find_value_for_key \"key56\" \"${alist[@]}\")\n\nif [[ -n $key56_value ]]; then\n    echo \"key56: $key56_value\"\nelse\n    echo \"key56 not found\"\nfi",
        "expected_result": "key56: data1",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then populates an associative array with key-value pairs and uses the defined function to find the value associated with the key \"key56\". If the value is found, it prints \"key56: [value]\", otherwise it prints \"key56 not found\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array and utilizes this function to search for the value of \"key56\".\n\n1. Define a function called `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Create a local variable `alist` to store the associative array passed as an argument.\n   b. Create a local variable `key` to store the key passed as an argument.\n   c. Create a local variable `value` and initialize it to an empty string.\n   d. Iterate through the elements of the associative array using a for loop.\n   e. Split each element into key-value pairs and compare the keys with the provided key.\n   f. If a match is found, assign the corresponding value to the `value` variable and exit the loop.\n   g. Print the value found.\n\n2. Populate the associative array `alist` with key-value pairs:\n   - \"key56,data1\"\n   - \"key57,data2\"\n   - \"key56,data3\"\n   - \"key57,data4\"\n   - \"key58,data5\"\n   - \"key56,data6\"\n\n3. Call the `find_value_for_key` function with the key \"key56\" and the associative array `alist` as arguments, and store the result in the variable `key56_value`.\n\n4. Check if the `key56_value` is not empty. If it is not empty:\n   a. Print \"key56: [value]\" to the console, where [value] is the value associated with \"key56\".\n   b. If it is empty, print \"key56 not found\" to the console."
    },
    {
        "Index": "25_8",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    local result=\"None\"\n\n    for item in \"${arr[@]}\"; do\n        IFS=',' read -ra pair <<< \"$item\"\n        if [[ \"${pair[0]}\" == \"$key\" ]]; then\n            result=\"${pair[1]}\"\n            break\n        fi\n    done\n\n    echo \"$result\"\n}\n\nalist=('color,red' 'color,blue' 'shape,circle')\n\ncolor_value=$(find_value_for_key alist 'color')\necho \"color: $color_value\"",
        "expected_result": "color: red",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'color'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an associative array name, a key, and returns the value associated with the key:\n   a. Create a local reference to the associative array passed as the first argument.\n   b. Set the local variable `key` to the second argument.\n   c. Initialize the local variable `result` to \"None\".\n   d. Iterate through each item in the associative array:\n      i. Split the item into key-value pairs using the comma as the delimiter.\n      ii. Check if the first element of the pair matches the specified key. If true, update `result` with the value and exit the loop.\n   e. Print the value of `result`.\n\n2. Initialize an associative array `alist` with the key-value pairs: 'color,red' and 'color,blue', and 'shape,circle'.\n\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'color' to retrieve the value associated with the key.\n\n4. Print the retrieved color value to the console."
    },
    {
        "Index": "25_9",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    local result=\"None\"\n\n    for pair in \"${arr[@]}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            result=$v\n            break\n        fi\n    done\n\n    echo \"$result\"\n}\n\nalist=('fruit,apple' 'fruit,banana' 'vegetable,carrot')\n\nfruit_value=$(find_value_for_key alist 'fruit')\necho \"fruit: $fruit_value\"",
        "expected_result": "fruit: apple",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'fruit'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters:\n   a. Create a local reference to the associative array using `local -n arr=$1`.\n   b. Store the key in a local variable `key`.\n   c. Initialize a local variable `result` with the value \"None\".\n   d. Iterate through each key-value pair in the associative array:\n      i. Split the pair into key `k` and value `v` using the `IFS` (Internal Field Separator).\n      ii. If the current key `k` matches the input key, update the `result` with the corresponding value `v` and exit the loop.\n   e. Print the `result` to the console.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'fruit,apple'\n   - 'fruit,banana'\n   - 'vegetable,carrot'\n\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'fruit'.\n4. Print the retrieved fruit value to the console in the format \"fruit: [fruit_value]\"."
    },
    {
        "Index": "25_10",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local idx=-1\n    local i=0\n    for item in \"${alist[@]:1}\"; do\n        if [[ $item == *\"$key\"* ]]; then\n            idx=$i\n            break\n        fi\n        ((i+=2))\n    done\n    if [[ $idx -ne -1 ]]; then\n        echo \"${alist[$((idx+2))]}\"\n    else\n        echo \"\"\n    fi\n}\n\nalist=('username' 'john_doe' 'password' '123456' 'username' 'jane_doe')\n\nusername_value=$(find_value_for_key 'username' \"${alist[@]}\")\nif [[ -n $username_value ]]; then\n    echo \"username: $username_value\"\nelse\n    echo \"username: not found\"\nfi",
        "expected_result": "username: john_doe",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then uses this function to find the value associated with the key 'username' in the array 'alist' and prints the result to the console.",
        "Text_details": "Create and execute a bash script that includes a function to search for the value associated with a specific key in an associative array and then utilizes this function to find the value associated with the key 'username' in the array 'alist'.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside this function:\n   a. Create a local variable `alist` to store the input associative array.\n   b. Create a local variable `key` to store the input key.\n   c. Initialize a local variable `idx` to -1 to store the index of the key if found.\n   d. Initialize a local variable `i` to 0 for iteration.\n   e. Iterate through the elements of the array using a for loop:\n      i. Check if the current item contains the key using the pattern matching operator `*\"$key\"*`.\n      ii. If the key is found, update the index `idx` and break out of the loop.\n      iii. Increment the index `i` by 2 to move to the next key-value pair.\n   f. If the index `idx` is not -1, print the value associated with the key.\n   g. If the index `idx` is -1, print an empty string.\n\n2. Define an associative array `alist` with key-value pairs:\n   - 'username' 'john_doe'\n   - 'password' '123456'\n   - 'username' 'jane_doe'\n\n3. Call the `find_value_for_key` function with the key 'username' and the associative array `alist` to find the value associated with the key 'username' and store it in the variable `username_value`.\n\n4. Check if the `username_value` is not empty. If true, print \"username: $username_value\" to the console.\n   If false, print \"username: not found\" to the console."
    },
    {
        "Index": "25_11",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    local result=\"None\"\n\n    for item in \"${arr[@]}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            result=$v\n            break\n        fi\n    done\n\n    echo \"$result\"\n}\n\nalist=('country,USA' 'country,Canada' 'continent,North America')\n\ncountry_value=$(find_value_for_key alist 'country')\necho \"country: $country_value\"",
        "expected_result": "country: USA",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specified key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'country'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specified key.\n\n1. Define a function `find_value_for_key` that takes an associative array name, a key, and returns the value associated with the key:\n   a. Create a local reference to the associative array passed as the first argument.\n   b. Set the local variable `key` to the second argument.\n   c. Initialize the local variable `result` to \"None\".\n   d. Iterate through each item in the associative array:\n      i. Split the item into key-value pairs using the comma as the delimiter and store them in variables `k` and `v`.\n      ii. Check if the current key `k` matches the specified key. If true, update the `result` with the corresponding value `v` and break the loop.\n   e. Print the `result`.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'country,USA'\n   - 'country,Canada'\n   - 'continent,North America'\n\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'country' to retrieve the value associated with the key.\n4. Print the retrieved value to the console in the format \"country: [country_value]\"."
    },
    {
        "Index": "25_12",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    local value=\"\"\n    for item in \"${arr[@]}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == \"$key\" ]]; then\n            value=$v\n            # Do not break here to ensure the last occurrence is found\n        fi\n    done\n    echo \"$value\"\n}\n\nalist=('color,Red' 'color,Blue' 'shape,Square')\n\ncolor_value=$(find_value_for_key alist 'color')\necho \"color: $color_value\"",
        "expected_result": "color: Blue",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'color'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Create a local reference to the associative array using `local -n arr=$1`.\n   b. Store the key in a variable `key` and initialize a variable `value` to an empty string.\n   c. Iterate through each item in the associative array using a `for` loop.\n   d. Split each item into key-value pairs using `IFS=',' read -r k v <<< \"$item\"`.\n   e. Check if the current key matches the specified key. If true, update the `value` variable with the corresponding value.\n   f. Do not break the loop to ensure the last occurrence of the key is found.\n   g. Print the `value` to the console.\n\n2. Initialize an associative array `alist` with the following key-value pairs: ('color,Red' 'color,Blue' 'shape,Square').\n\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'color', and store the result in the variable `color_value`.\n\n4. Print the value of the color to the console using the `echo` command."
    },
    {
        "Index": "25_13",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local found_values=()\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            found_values+=(\"$v\")\n        fi\n    done\n\n    echo \"${found_values[@]:0:1}\"\n}\n\nalist=('animal,Dog' 'animal,Cat' 'type,Pet')\n\nanimal_value=($(find_value_for_key 'animal' \"${alist[@]}\"))\necho \"animal: ${animal_value[0]}\"",
        "expected_result": "animal: Dog",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array `alist` with key-value pairs and calls the function to find the value associated with the key 'animal'. Finally, it prints the value associated with the key 'animal' to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Store the array in a local variable `alist`.\n   b. Store the key in a local variable `key`.\n   c. Initialize an empty array `found_values` to store the values associated with the key.\n   d. Iterate through the elements of the array, excluding the first element (which is the key-value pair to be searched).\n   e. For each item in the array:\n      i. Use the `IFS` command to split the item into key `k` and value `v`.\n      ii. If the key `k` matches the specified key, add the value `v` to the `found_values` array.\n   f. Print the first value associated with the key found, if any.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'animal,Dog'\n   - 'animal,Cat'\n   - 'type,Pet'\n\n3. Call the `find_value_for_key` function with the key 'animal' and the associative array `alist` as arguments, and store the result in the array `animal_value`.\n\n4. Print the value associated with the key 'animal' from the `animal_value` array to the console."
    },
    {
        "Index": "25_14",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    local value=\"\"\n\n    for (( idx=${#arr[@]}-2 ; idx>=0 ; idx-=2 )); do\n        if [[ ${arr[idx]} == $key ]]; then\n            value=${arr[idx+1]}\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n\ndeclare -a alist=('fruit' 'Apple' 'fruit' 'Banana' 'origin' 'Tropical')\n\nfruit_value=$(find_value_for_key alist 'fruit')\necho \"fruit: $fruit_value\"",
        "expected_result": "fruit: Banana",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'fruit'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates an associative array and retrieves the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Create a local reference to the associative array using `local -n arr=$1`.\n   b. Store the key in a local variable `key=$2` and initialize an empty string variable `value`.\n   c. Iterate through the associative array in reverse order, starting from the second-to-last element and moving backwards in steps of 2.\n   d. Check if the current element is equal to the specified key. If true, retrieve the value associated with the key and store it in the `value` variable.\n   e. Break out of the loop after finding the value associated with the key.\n   f. Print the value to the console.\n\n2. Declare an associative array `alist` with the key-value pairs: 'fruit'-'Apple', 'fruit'-'Banana', and 'origin'-'Tropical'.\n\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'fruit' to retrieve the value associated with the key 'fruit'.\n\n4. Print the retrieved value to the console in the format \"fruit: [fruit_value]\"."
    },
    {
        "Index": "25_15",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n\nalist=('vehicle,Car' 'vehicle,Motorcycle' 'fuel,Gasoline')\n\nvehicle_value=$(find_value_for_key 'vehicle' \"${alist[@]}\")\necho \"vehicle: $vehicle_value\"",
        "expected_result": "vehicle: Car",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array with key-value pairs and uses the defined function to find and print the value associated with the key 'vehicle'.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Store the input associative array in a local variable `alist`.\n   b. Store the first parameter as the key in a local variable `key`.\n   c. Declare a local variable `value` to store the value associated with the key.\n   d. Iterate through the elements of the associative array using a for loop.\n   e. Split each item into key-value pairs using the comma as a delimiter and store them in variables `k` and `v`.\n   f. If the current key `k` matches the input key, set the `value` variable to the corresponding value `v` and exit the loop.\n   g. Print the value associated with the key.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'vehicle,Car'\n   - 'vehicle,Motorcycle'\n   - 'fuel,Gasoline'\n\n3. Call the `find_value_for_key` function with the key 'vehicle' and the associative array `alist` as arguments.\n4. Print the value associated with the key 'vehicle' to the console."
    },
    {
        "Index": "25_16",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local filtered=()\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -ra kv <<< \"$pair\"\n        if [[ ${kv[0]} == \"$key\" ]]; then\n            filtered+=(\"${kv[1]}\")\n        fi\n    done\n\n    if [[ ${#filtered[@]} -gt 0 ]]; then\n        echo \"${filtered[0]}\"\n    else\n        echo \"None\"\n    fi\n}\n\nalist=('season,Spring' 'season,Summer' 'activity,Hiking')\n\nseason_value=$(find_value_for_key 'season' \"${alist[@]}\")\necho \"season: $season_value\"",
        "expected_result": "season: Spring",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to find the value associated with the key 'season' in the provided list and prints the result.",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function called `find_value_for_key` that takes an array of key-value pairs as input. Inside the function:\n   a. Extract the first element from the input array as the `key`.\n   b. Initialize an empty array called `filtered` to store the filtered values.\n   c. Iterate through the key-value pairs in the input array:\n      i. Split each pair into key and value using the comma as the delimiter.\n      ii. If the key matches the specified `key`, add the corresponding value to the `filtered` array.\n   d. If there are filtered values, print the first value in the `filtered` array. Otherwise, print \"None\".\n\n2. Create an array `alist` containing the key-value pairs: ('season,Spring'), ('season,Summer'), and ('activity,Hiking').\n\n3. Call the `find_value_for_key` function with the key 'season' and the `alist` array as arguments, and store the result in the variable `season_value`.\n\n4. Print the value associated with the key 'season' using the variable `season_value`."
    },
    {
        "Index": "25_17",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key && -z $value ]]; then\n            value=$v\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n\nalist=('element,Fire' 'element,Water' 'category,Nature')\n\nelement_value=$(find_value_for_key 'element' \"${alist[@]}\")\necho \"element: $element_value\"",
        "expected_result": "element: Fire",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array `alist` with key-value pairs and calls the `find_value_for_key` function to retrieve the value associated with the key 'element'. Finally, it prints the value associated with the key 'element' to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input and returns the value associated with the key in the array. Inside the function:\n   a. Store the array passed as arguments in a local variable `alist`.\n   b. Extract the key and array elements from the input arguments.\n   c. Iterate through the array elements and split each element into key-value pairs.\n   d. If the key matches the specified key and the value is not empty, store the value in a local variable `value` and break the loop.\n   e. Print the value.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'element,Fire'\n   - 'element,Water'\n   - 'category,Nature'\n\n3. Call the `find_value_for_key` function with the key 'element' and the `alist` array as arguments, and store the result in the variable `element_value`.\n\n4. Print the value associated with the key 'element' to the console."
    },
    {
        "Index": "25_18",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local values=()\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            values+=(\"$v\")\n        fi\n    done\n\n    if [ ${#values[@]} -gt 0 ]; then\n        echo \"${values[0]}\"\n    else\n        echo \"None\"\n    fi\n}\n\nalist=('planet,Earth' 'planet,Mars' 'universe,Milky Way')\n\nplanet_value=$(find_value_for_key 'planet' \"${alist[@]}\")\necho \"planet: $planet_value\"",
        "expected_result": "planet: Earth",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to find the value associated with the key 'planet' in the provided list and prints the result to the console.",
        "Text_details": "Create and execute a bash script that includes a function to search for the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function called `find_value_for_key` that takes an array `alist` and a key `key` as input. Inside the function:\n   a. Create a local array variable `values` to store the values associated with the key.\n   b. Iterate through the elements of the array `alist` (excluding the first element) using a for loop.\n   c. Split each element into key-value pairs using the comma as the delimiter and store them in variables `k` and `v`.\n   d. If the key `k` matches the input key, add the value `v` to the `values` array.\n   e. If the `values` array is not empty, print the first value in the array to the console.\n   f. If the `values` array is empty, print \"None\" to the console.\n\n2. Define an array `alist` containing the elements 'planet,Earth', 'planet,Mars', and 'universe,Milky Way'.\n\n3. Call the `find_value_for_key` function with the key 'planet' and the array `alist` as arguments, and store the result in the variable `planet_value`.\n\n4. Print the value of the planet key by echoing \"planet: $planet_value\" to the console."
    },
    {
        "Index": "25_19",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -a alist=(\"${!1}\")\n    local key=$2\n    local matches=()\n    local index=0\n    local len=${#alist[@]}\n    while [ $index -lt $len ]; do\n        if [ \"${alist[index]}\" == \"$key\" ]; then\n            matches+=(\"${alist[index+1]}\")\n            break\n        fi\n        let index=index+2\n    done\n    if [ ${#matches[@]} -ne 0 ]; then\n        echo \"${matches[0]}\"\n    else\n        echo \"None\"\n    fi\n}\n\ndeclare -a alist=('number' 'One' 'number' 'Two' 'type' 'Integer')\n\nnumber_value=$(find_value_for_key alist[@] 'number')\necho \"number: $number_value\"",
        "expected_result": "number: One",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'number'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in an associative array.\n\n1. Define a function `find_value_for_key` that takes three parameters: an associative array, a key, and its index. Inside the function:\n   a. Create a local array `alist` by expanding the associative array passed as the first argument.\n   b. Set the local variable `key` to the value of the second argument.\n   c. Initialize an empty array `matches` to store matching values.\n   d. Initialize variables `index` and `len` to 0 and the length of `alist`, respectively.\n   e. Use a while loop to iterate over the elements of `alist`:\n      i. Check if the current element is equal to the specified key.\n      ii. If true, add the next element (value) to the `matches` array and break out of the loop.\n      iii. Increment the index by 2 to move to the next key-value pair.\n   f. Check if any matches were found:\n      i. If matches exist, print the first match to the console.\n      ii. If no matches exist, print \"None\" to the console.\n\n2. Declare an associative array `alist` with the key-value pairs: 'number'-'One', 'number'-'Two', 'type'-'Integer'.\n\n3. Call the `find_value_for_key` function with the associative array `alist`, and the key 'number' to retrieve the value associated with the key 'number'.\n\n4. Print the retrieved value to the console in the format \"number: [retrieved_value]\"."
    },
    {
        "Index": "25_20",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local result=()\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            result+=(\"$v\")\n        fi\n    done\n\n    echo \"${result[0]}\"\n}\n\nalist=('letter,A' 'letter,B' 'alphabet,English')\n\nletter_value=$(find_value_for_key 'letter' \"${alist[@]}\")\necho \"letter: $letter_value\"",
        "expected_result": "letter: A",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then calls this function to find the value associated with the key 'letter' in the associative array 'alist' and prints the result to the console.",
        "Text_details": "Create and execute a bash script that manipulates an associative array and retrieves the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Store the input associative array in a local variable `alist`.\n   b. Store the input key in a local variable `key`.\n   c. Initialize an empty array `result` to store the values associated with the key.\n   d. Iterate through the elements of the associative array using a for loop:\n      i. Split each element into key-value pairs using the comma as a delimiter.\n      ii. Check if the current key matches the input key. If true, add the corresponding value to the `result` array.\n   e. Print the first value in the `result` array.\n\n2. Define an associative array `alist` with the elements 'letter,A', 'letter,B', and 'alphabet,English'.\n\n3. Call the `find_value_for_key` function with the key 'letter' and the associative array `alist` as arguments, and store the result in the variable `letter_value`.\n\n4. Print the value of the variable `letter_value` to the console in the format \"letter: [value]\"."
    },
    {
        "Index": "25_21",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    local index=0\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n        ((index++))\n    done\n    echo $value\n}\n\nalist=('symbol,+' 'symbol,-' 'operation,Arithmetic')\n\nsymbol_value=$(find_value_for_key 'symbol' \"${alist[@]}\")\necho \"symbol: $symbol_value\"",
        "expected_result": "symbol: +",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specified key in an associative array. The script then initializes an associative array `alist` with key-value pairs and calls the function to find the value associated with the key 'symbol'. Finally, it prints the value associated with the key 'symbol' to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input and returns the value associated with the key:\n   a. Store the input associative array in a local variable `alist`.\n   b. Store the input key in a local variable `key`.\n   c. Initialize a local variable `value` to an empty string.\n   d. Initialize a local variable `index` to 0.\n   e. Iterate through the key-value pairs in the associative array:\n      i. Split each pair into key `k` and value `v`.\n      ii. If the current key `k` matches the specified key, set the `value` to the corresponding value `v` and exit the loop.\n      iii. Increment the `index` for each iteration.\n   f. Print the `value` to the console.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'symbol,+' \n   - 'symbol,-' \n   - 'operation,Arithmetic'\n\n3. Call the `find_value_for_key` function with the key 'symbol' and the associative array `alist` as arguments.\n\n4. Print the value associated with the key 'symbol' to the console."
    },
    {
        "Index": "25_22",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r item_key item_value <<< \"$item\"\n        if [[ $item_key == $key ]]; then\n            value=$item_value\n            break\n        fi\n    done\n\n    if [[ -n $value ]]; then\n        echo $value\n    else\n        echo \"None\"\n    fi\n}\n\nalist=('molecule,H2O' 'molecule,CO2' 'state,Gas')\n\nmolecule_value=$(find_value_for_key 'molecule' \"${alist[@]}\")\necho \"molecule: $molecule_value\"",
        "expected_result": "molecule: H2O",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script initializes an associative array `alist` with key-value pairs, and then calls the `find_value_for_key` function to retrieve the value associated with the key 'molecule'. The retrieved value is then printed to the console.",
        "Text_details": "Create and execute a bash script that manipulates an associative array and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Store the array passed as arguments in a local variable `alist`.\n   b. Store the first argument as the `key`.\n   c. Initialize a local variable `value`.\n   d. Iterate through the array elements, excluding the first one, using a for loop.\n      i. Split each element into `item_key` and `item_value` using the comma as the delimiter.\n      ii. Check if the `item_key` matches the specified `key`. If true, assign the `item_value` to the `value` variable and break out of the loop.\n   e. If a `value` is found, print the `value` to the console. Otherwise, print \"None\".\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'molecule,H2O'\n   - 'molecule,CO2'\n   - 'state,Gas'\n\n3. Call the `find_value_for_key` function with the key 'molecule' and the associative array `alist` as arguments, and store the result in the variable `molecule_value`.\n\n4. Print the value of the molecule retrieved from the associative array using the `find_value_for_key` function."
    },
    {
        "Index": "25_23",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local index=0\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        if [ \"$((index % 2))\" -eq 0 ]; then\n            if [ \"${pair}\" == \"$key\" ]; then\n                echo \"${alist[$((index + 2))]}\"\n                return\n            fi\n        fi\n        ((index++))\n    done\n}\n\nalist=('metal' 'Gold' 'metal' 'Silver' 'value' 'Precious')\n\nmetal_value=$(find_value_for_key 'metal' \"${alist[@]}\")\necho \"metal: $metal_value\"",
        "expected_result": "metal: Gold",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array with keys and values, and uses the defined function to find and print the value associated with the key 'metal'.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input. Inside the function:\n   a. Store the input associative array in a local variable `alist`.\n   b. Store the first input parameter as the key in a local variable `key`.\n   c. Initialize a local variable `index` to 0 to keep track of the array index.\n   d. Use a for loop to iterate through the elements of the associative array:\n      i. Retrieve each key-value pair from the array.\n      ii. Check if the current element is a key and matches the input key. If true, print the value associated with the key and return.\n      iii. Increment the index for the next iteration.\n   e. End the function.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'metal' => 'Gold'\n   - 'metal' => 'Silver'\n   - 'value' => 'Precious'\n\n3. Call the `find_value_for_key` function with the key 'metal' and the associative array `alist` as parameters, and store the result in the variable `metal_value`.\n\n4. Print the value associated with the key 'metal' using the variable `metal_value`."
    },
    {
        "Index": "25_24",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local key=$1\n    shift\n    local alist=(\"$@\")\n    for item in \"${alist[@]}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key ]]; then\n            echo \"$v\"\n            return\n        fi\n    done\n    echo \"No match\"\n}\n\nalist=('temperature,Hot' 'temperature,Cold' 'degree,Celsius')\n\ntemperature_value=$(find_value_for_key 'temperature' \"${alist[@]}\")\necho \"temperature: $temperature_value\"",
        "expected_result": "temperature: Hot",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specified key in a list of key-value pairs. The script then calls this function to find the value associated with the key 'temperature' in the provided list and prints the result.",
        "Text_details": "Create and execute a bash script that includes a function to search for the value associated with a specified key in a list of key-value pairs.\n\n1. Define a function called `find_value_for_key` that takes the key and a list of key-value pairs as input. Inside the function:\n   a. Store the first input parameter as the variable `key`.\n   b. Shift the parameters to remove the first element (the key) from the list and store the remaining elements in an array called `alist`.\n   c. Iterate through each item in the `alist` array.\n   d. For each item, split the key-value pair using the comma as the delimiter and store the key and value in variables `k` and `v` respectively.\n   e. Check if the current key `k` matches the specified key. If true, print the associated value `v` and return from the function.\n   f. If no match is found, print \"No match\".\n\n2. Define an array `alist` containing the key-value pairs: 'temperature,Hot', 'temperature,Cold', and 'degree,Celsius'.\n\n3. Call the `find_value_for_key` function with the key 'temperature' and the `alist` array as parameters, and store the result in the variable `temperature_value`.\n\n4. Print the value associated with the key 'temperature' to the console using the `echo` command."
    },
    {
        "Index": "25_25",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value_list=()\n    local pair\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value_list+=(\"$v\")\n        fi\n    done\n\n    if [ ${#value_list[@]} -gt 0 ]; then\n        echo \"${value_list[0]}\"\n    else\n        echo \"Not available\"\n    fi\n}\n\nalist=('sport,Soccer' 'sport,Basketball' 'type,Outdoor')\n\nsport_value=$(find_value_for_key 'sport' \"${alist[@]}\")\necho \"sport: $sport_value\"",
        "expected_result": "sport: Soccer",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in a list of key-value pairs. The script then calls this function to find the value associated with the key 'sport' in the provided list. If a value is found, it prints \"sport: [value]\". If no value is found, it prints \"sport: Not available\".",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in a list of key-value pairs.\n\n1. Define a function `find_value_for_key` that takes an array `alist` and a key `key` as input. Inside the function:\n   a. Create a local array `value_list` to store the values associated with the key.\n   b. Iterate through the key-value pairs in the array `alist`.\n   c. For each pair, split the pair into key `k` and value `v`.\n   d. If the key `k` matches the input key `key`, add the value `v` to the `value_list`.\n   e. If the `value_list` is not empty, print the first value in the list.\n   f. If the `value_list` is empty, print \"Not available\".\n\n2. Define an array `alist` containing the key-value pairs: ('sport,Soccer' 'sport,Basketball' 'type,Outdoor').\n\n3. Call the `find_value_for_key` function with the key 'sport' and the array `alist` as arguments, and store the result in the variable `sport_value`.\n\n4. Print the value of `sport_value` along with the key \"sport\" to the console."
    },
    {
        "Index": "25_26",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local found=0\n    local value=\"Key not found\"\n\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            found=1\n            break\n        fi\n    done\n\n    if [[ $found -eq 0 ]]; then\n        echo $value\n    else\n        echo $value\n    fi\n}\n\n# Define the list as an array of 'key,value' strings\nalist=('currency,Dollar' 'currency,Euro' 'country,USA')\n\n# Call the function with the array and the key\ncurrency_value=$(find_value_for_key 'currency' \"${alist[@]}\")\necho \"currency: $currency_value\"",
        "expected_result": "currency: Dollar",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in a list of 'key,value' pairs. The script then initializes an array with 'key,value' pairs and calls the function to find the value associated with the key 'currency'. Finally, it prints the value associated with the key 'currency' to the console.",
        "Text_details": "Create and execute a bash script that includes a function to find the value associated with a specific key in a list of 'key,value' pairs and demonstrates its usage.\n\n1. Define a function called `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Initialize a local variable `found` to 0 to track whether the key is found.\n   b. Initialize a local variable `value` with the default value \"Key not found\".\n   c. Iterate through the array of 'key,value' pairs using a for loop.\n   d. Split each pair into `k` (key) and `v` (value) using the `IFS` (Internal Field Separator).\n   e. If the current key matches the input key, update the `value` with the corresponding value and set `found` to 1. Then, break out of the loop.\n   f. If the key is not found, the default value \"Key not found\" is retained.\n   g. Print the `value` to the console.\n\n2. Define an array `alist` containing the 'key,value' pairs: ('currency,Dollar' 'currency,Euro' 'country,USA').\n\n3. Call the `find_value_for_key` function with the key 'currency' and the array `alist` as arguments, and store the result in the variable `currency_value`.\n\n4. Print the value associated with the key 'currency' to the console using the `echo` command."
    },
    {
        "Index": "25_27",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"Value not found\"\n    for pair in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$pair\"\n        if [[ $k == $key ]]; then\n            value=$v\n            break\n        fi\n    done\n    echo \"$value\"\n}\n\nalist=('object,Chair' 'object,Table' 'material,Wood')\n\nobject_value=$(find_value_for_key 'object' \"${alist[@]}\")\necho \"object: $object_value\"",
        "expected_result": "object: Chair",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array `alist` with key-value pairs, and calls the function to find the value associated with the key 'object'. Finally, it prints the result to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Extract the array and key from the input parameters.\n   b. Initialize a variable `value` with the value \"Value not found\".\n   c. Iterate through the array elements, excluding the first element, to extract key-value pairs.\n   d. Split each pair into key `k` and value `v`.\n   e. If the extracted key `k` matches the input key, update the `value` variable with the corresponding value `v` and exit the loop.\n   f. Print the `value`.\n\n2. Initialize an associative array `alist` with the following key-value pairs:\n   - 'object,Chair'\n   - 'object,Table'\n   - 'material,Wood'\n\n3. Call the `find_value_for_key` function with the key 'object' and the associative array `alist` as arguments, and store the result in the variable `object_value`.\n\n4. Print the value associated with the key 'object' to the console in the format \"object: [object_value]\"."
    },
    {
        "Index": "25_28",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local value=\"\"\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r k v <<< \"$item\"\n        if [[ $k == $key && -z $value ]]; then\n            value=$v\n            break\n        fi\n    done\n    echo $value\n}\n\nalist=('software,Word' 'software,Excel' 'platform,Office')\n\nsoftware_value=$(find_value_for_key 'software' \"${alist[@]}\")\necho \"software: $software_value\"",
        "expected_result": "software: Word",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array with key-value pairs and uses the defined function to find and print the value associated with the key 'software'.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and defines a function to find the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Initialize a local variable `value` to an empty string.\n   b. Iterate through the array elements, excluding the first element (which is the key), using a for loop.\n   c. Split each element into key-value pairs using the `IFS` and `read` commands.\n   d. Check if the current key matches the input key and if `value` is empty. If true, assign the corresponding value to the `value` variable and break out of the loop.\n   e. Print the value found.\n\n2. Initialize an associative array `alist` with the following key-value pairs: ('software,Word' 'software,Excel' 'platform,Office').\n\n3. Call the `find_value_for_key` function with the key 'software' and the `alist` array as arguments, and store the result in the variable `software_value`.\n\n4. Print the value associated with the key 'software' using the variable `software_value`."
    },
    {
        "Index": "25_29",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local -n arr=$1\n    local key=$2\n    for pair in \"${arr[@]}\"; do\n        IFS=',' read -ra PAIR <<< \"$pair\"\n        if [[ \"${PAIR[0]}\" == \"$key\" ]]; then\n            echo \"${PAIR[1]}\"\n            return\n        fi\n    done\n}\n\nalist=('city,New York' 'city,Los Angeles' 'location,USA')\n\ncity_value=$(find_value_for_key alist 'city')\necho \"city: $city_value\"",
        "expected_result": "city: New York",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array `alist` with key-value pairs and calls the `find_value_for_key` function to retrieve the value associated with the key 'city'. Finally, it prints the value associated with the key 'city' to the console.",
        "Text_details": "Create and execute a bash script that manipulates an associative array and retrieves the value associated with a specific key.\n\n1. Define a function `find_value_for_key` that takes an associative array and a key as input parameters. Inside the function:\n   a. Create a local reference to the associative array using `local -n arr=$1`.\n   b. Store the key in a variable `key` from the function input.\n   c. Iterate through each pair in the associative array:\n      i. Split the pair into key-value components using the comma as a delimiter and store them in an array `PAIR`.\n      ii. Check if the first element of `PAIR` matches the input `key`. If true, print the second element of `PAIR` and return from the function.\n2. Initialize an associative array `alist` with the following key-value pairs: ('city,New York'), ('city,Los Angeles'), ('location,USA').\n3. Call the `find_value_for_key` function with the associative array `alist` and the key 'city' and store the result in the variable `city_value`.\n4. Print the value associated with the key 'city' to the console using the `echo` command."
    },
    {
        "Index": "25_30",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction find_value_for_key {\n    local alist=(\"$@\")\n    local key=$1\n    local found='None'\n\n    for item in \"${alist[@]:1}\"; do\n        IFS=',' read -r item_key item_value <<< \"$item\"\n        if [[ $item_key == $key ]]; then\n            found=$item_value\n            break\n        fi\n    done\n\n    echo \"$found\"\n}\n\nalist=('sound,Loud' 'sound,Quiet' 'decibel,High')\n\nsound_value=$(find_value_for_key 'sound' \"${alist[@]}\")\necho \"sound: $sound_value\"",
        "expected_result": "sound: Loud",
        "Text_summary": "Create and execute a bash script that defines a function to find the value associated with a specific key in an associative array. The script then initializes an associative array `alist` with key-value pairs and calls the function to find the value associated with the key 'sound'. Finally, it prints the value associated with the key 'sound' to the console.",
        "Text_details": "Create and execute a bash script that manipulates associative arrays and retrieves values based on keys.\n\n1. Define a function `find_value_for_key` that takes an array and a key as input parameters. Inside the function:\n   a. Extract the array and key from the input parameters.\n   b. Initialize a variable `found` with the value 'None' to store the result.\n   c. Iterate through the array elements, excluding the first element (which is the key-value pair to search).\n   d. Split each element into `item_key` and `item_value`.\n   e. Check if the `item_key` matches the specified `key`. If true, update `found` with the corresponding `item_value` and exit the loop.\n   f. Print the value stored in `found`.\n\n2. Initialize an associative array `alist` with the following key-value pairs: 'sound,Loud', 'sound,Quiet', and 'decibel,High'.\n\n3. Call the `find_value_for_key` function with the key 'sound' and the associative array `alist` as arguments.\n\n4. Print the value associated with the key 'sound' to the console."
    }
]