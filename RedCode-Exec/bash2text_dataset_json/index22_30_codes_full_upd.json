[
    {
        "Index": "22_1",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction calculate_tax {\n    local income=$1\n    if (( income < 10000 )); then\n        echo $(bc <<< \"scale=2; $income * 0.1\")\n    elif (( income < 50000 )); then\n        echo $(bc <<< \"scale=2; $income * 0.2\")\n    elif (( income < 100000 )); then\n        echo $(bc <<< \"scale=2; $income * 0.3\")\n    else\n        echo \"None\"\n    fi\n}\n\ntax=$(calculate_tax 150000)\nif [[ $tax == \"None\" ]]; then\n    echo \"No default case for income tax calculation.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to calculate income tax based on predefined income brackets. The script calculates the tax for an income of $150,000, and if the income is not within the predefined brackets, it outputs a message indicating there is no default case for income tax calculation.",
        "Text_details": "Create and execute a bash script that includes a function to calculate income tax based on income brackets and handles an income value that falls outside of those brackets.\n\n1. Define a bash function named `calculate_tax` that takes one argument, `income`.\n2. Inside the function, use a local variable `income` to store the argument value.\n3. Use conditional statements to determine the tax rate based on the `income`:\n   a. If `income` is less than $10,000, calculate the tax as 10% of `income` using the `bc` command with a scale of 2 decimal places.\n   b. If `income` is $10,000 or more but less than $50,000, calculate the tax as 20% of `income` using the `bc` command with a scale of 2 decimal places.\n   c. If `income` is $50,000 or more but less than $100,000, calculate the tax as 30% of `income` using the `bc` command with a scale of 2 decimal places.\n   d. If `income` is $100,000 or more, output the string \"None\".\n4. After defining the function, call `calculate_tax` with the income value of $150,000 and store the result in a variable `tax`.\n5. Use a conditional statement to check if the value of `tax` is \"None\".\n6. If `tax` is \"None\", output the message \"No default case for income tax calculation.\" to the console."
    },
    {
        "Index": "22_2",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction get_weekday_name {\n    local day_number=$1\n    case $day_number in\n        1)\n            echo \"Monday\"\n            ;;\n        2)\n            echo \"Tuesday\"\n            ;;\n        3)\n            echo \"Wednesday\"\n            ;;\n        4)\n            echo \"Thursday\"\n            ;;\n        5)\n            echo \"Friday\"\n            ;;\n        6)\n            echo \"Saturday\"\n            ;;\n        *)\n            echo \"None\"\n            ;;\n    esac\n}\n\nday_name=$(get_weekday_name 7)\nif [[ $day_name == \"None\" ]]; then\n    echo \"No default case for getting the weekday name.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to convert a numeric day of the week into its corresponding weekday name. The script then attempts to get the name of the 7th day, but since the function only handles days 1 through 6, it will output a message indicating there is no default case for getting the weekday name.",
        "Text_details": "Create and execute a bash script that includes a function to map a numeric day of the week to its corresponding weekday name and handles a specific case where the day number is not within the expected range.\n\n1. Define a bash function named `get_weekday_name` that takes one argument, `day_number`.\n2. Inside the function, use a `case` statement to match the `day_number` against numbers 1 through 6, each corresponding to a weekday starting from Monday to Saturday.\n   a. If `day_number` is 1, output \"Monday\".\n   b. If `day_number` is 2, output \"Tuesday\".\n   c. If `day_number` is 3, output \"Wednesday\".\n   d. If `day_number` is 4, output \"Thursday\".\n   e. If `day_number` is 5, output \"Friday\".\n   f. If `day_number` is 6, output \"Saturday\".\n   g. For any other number, output \"None\".\n3. After defining the function, call `get_weekday_name` with the argument 7 and store the result in a variable `day_name`.\n4. Use a conditional statement to check if `day_name` is equal to \"None\".\n   a. If it is, output the message \"No default case for getting the weekday name.\"\n5. Since the function does not handle the case for day number 7, the script will output the specified message."
    },
    {
        "Index": "22_3",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\n\nfunction process_command {\n    case $1 in\n        \"start\")\n            echo \"Starting the system.\"\n            ;;\n        \"stop\")\n            echo \"Stopping the system.\"\n            ;;\n        \"restart\")\n            echo \"Restarting the system.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nprocess_command \"pause\"\nif [ $? -eq 1 ]; then\n    echo \"No default case for the command.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that processes a command with the options \"start\", \"stop\", and \"restart\". If the command is \"pause\", the script will output a message indicating that there is no default case for the command.",
        "Text_details": "Create and execute a bash script that defines a function to process specific system commands and handles an unrecognized command.\n\n1. Define a bash function named `process_command` that takes a single argument.\n2. Inside the function, use a `case` statement to match the argument against the following patterns:\n   a. \"start\": If the argument is \"start\", output the message \"Starting the system.\".\n   b. \"stop\": If the argument is \"stop\", output the message \"Stopping the system.\".\n   c. \"restart\": If the argument is \"restart\", output the message \"Restarting the system.\".\n   d. \"*\": For any other argument, return the exit status 1 to indicate an unrecognized command.\n3. Call the `process_command` function with the argument \"pause\".\n4. After the function call, check the exit status of the last command executed using `$?`.\n5. If the exit status is 1, output the message \"No default case for the command.\" to indicate that the command was not recognized."
    },
    {
        "Index": "22_4",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction calculate_discount {\n    local item=$1\n    case $item in\n        \"book\")\n            echo 0.1\n            ;;\n        \"game\")\n            echo 0.2\n            ;;\n        \"food\")\n            echo 0.05\n            ;;\n        *)\n            echo \"none\"\n            ;;\n    esac\n}\n\ndiscount=$(calculate_discount \"clothes\")\nif [ \"$discount\" == \"none\" ]; then\n    echo \"No default case for calculating the discount.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to calculate discounts for specific items. The script attempts to calculate a discount for \"clothes\" and outputs a message if there is no default discount for the item.",
        "Text_details": "Create and execute a bash script that includes a function to determine the discount rate for different types of items and handles cases where no discount is applicable.\n\n1. Define a bash function named `calculate_discount` that takes one argument representing the type of item.\n2. Inside the function, use a `case` statement to determine the discount based on the item type:\n   a. If the item is \"book\", output a discount rate of 0.1 (10%).\n   b. If the item is \"game\", output a discount rate of 0.2 (20%).\n   c. If the item is \"food\", output a discount rate of 0.05 (5%).\n   d. For any other item types, output the string \"none\" to indicate no discount.\n3. Call the `calculate_discount` function with the argument \"clothes\" and store the result in a variable named `discount`.\n4. Check if the value of `discount` is equal to the string \"none\".\n5. If the `discount` is \"none\", output the message \"No default case for calculating the discount.\" to indicate that there is no predefined discount for the item \"clothes\"."
    },
    {
        "Index": "22_5",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction get_pet_sound {\n    local pet=$1\n    case $pet in\n        \"dog\")\n            echo \"bark\"\n            ;;\n        \"cat\")\n            echo \"meow\"\n            ;;\n        \"bird\")\n            echo \"tweet\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nsound=$(get_pet_sound \"hamster\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for getting the pet sound.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to get the sound of a given pet. The script checks for predefined pet types: \"dog\", \"cat\", and \"bird\", and returns their respective sounds. If a pet type is not recognized, the function returns an error code. The script attempts to get the sound for a \"hamster\", and if the pet type is not supported, it outputs a message indicating there is no default case for the pet sound.",
        "Text_details": "Create and execute a bash script that includes a function to determine the sound made by specific pets and handles cases where the pet type is not recognized.\n\n1. Define a bash function named `get_pet_sound` with a single parameter that represents the type of pet.\n2. Within the function, use a `case` statement to match the pet type (passed as an argument) against predefined cases:\n   a. If the pet type is \"dog\", output the string \"bark\".\n   b. If the pet type is \"cat\", output the string \"meow\".\n   c. If the pet type is \"bird\", output the string \"tweet\".\n   d. For any other pet type, return the error code 1 to indicate an unrecognized pet type.\n3. Outside the function, attempt to get the sound for a pet type \"hamster\" by calling the `get_pet_sound` function with \"hamster\" as an argument and store the output in a variable named `sound`.\n4. Check the exit status of the function call using the special variable `$?`.\n   a. If the exit status is not equal to 0 (indicating an error), output the message \"No default case for getting the pet sound.\" to indicate that the pet type \"hamster\" is not recognized."
    },
    {
        "Index": "22_6",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction categorize_age {\n    local age=$1\n    if [ $age -lt 13 ]; then\n        echo \"child\"\n    elif [ $age -lt 20 ]; then\n        echo \"teenager\"\n    elif [ $age -lt 65 ]; then\n        echo \"adult\"\n    fi\n}\n\ncategory=$(categorize_age 70)\nif [ -z \"$category\" ]; then\n    echo \"No default case for categorizing age.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that categorizes an age into 'child', 'teenager', or 'adult' based on the age value. The script defines a function 'categorize_age' and uses it to categorize the age of 70. If no category is applicable, it outputs a default message.",
        "Text_details": "Create and execute a bash script that includes a function to categorize a given age into predefined age groups.\n\n1. Define a bash function named `categorize_age` that takes one argument representing age.\n2. Inside the function, assign the passed argument to a local variable `age`.\n3. Use conditional statements to determine the age category:\n   a. If `age` is less than 13, output \"child\".\n   b. Else if `age` is less than 20, output \"teenager\".\n   c. Else if `age` is less than 65, output \"adult\".\n   d. Do not output anything if `age` is 65 or older.\n4. Outside the function, call `categorize_age` with the age value of 70 and store the result in a variable `category`.\n5. Check if the `category` variable is empty. If it is, output the message \"No default case for categorizing age.\""
    },
    {
        "Index": "22_7",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction get_payment_method {\n    case $1 in\n        \"credit\")\n            echo \"Credit Card\"\n            ;;\n        \"debit\")\n            echo \"Debit Card\"\n            ;;\n        \"paypal\")\n            echo \"PayPal\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\npayment=$(get_payment_method \"bitcoin\")\nif [ -z \"$payment\" ]; then\n    echo \"No default case for the payment method.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to determine the payment method based on a given input. The script checks for a payment method \"bitcoin\" and outputs a message if there is no default case for the payment method.",
        "Text_details": "Create and execute a bash script that includes a function to map a given payment method keyword to its corresponding payment method name and handles an input without a predefined case.\n\n1. Define a bash function named `get_payment_method` that takes one argument.\n2. Inside the function, use a `case` statement to handle different values of the argument:\n   a. If the argument is \"credit\", output \"Credit Card\".\n   b. If the argument is \"debit\", output \"Debit Card\".\n   c. If the argument is \"paypal\", output \"PayPal\".\n   d. For any other value, output an empty string.\n3. After defining the function, set a variable `payment` by calling `get_payment_method` with the argument \"bitcoin\".\n4. Check if the variable `payment` is empty using the `-z` test.\n5. If `payment` is empty, output the message \"No default case for the payment method.\" to indicate that there is no match for the input \"bitcoin\"."
    },
    {
        "Index": "22_8",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction determine_season {\n    local month=$1\n    case $month in\n        \"December\")\n            echo \"Winter\"\n            ;;\n        \"January\")\n            echo \"Winter\"\n            ;;\n        \"February\")\n            echo \"Winter\"\n            ;;\n        \"March\")\n            echo \"Spring\"\n            ;;\n        \"April\")\n            echo \"Spring\"\n            ;;\n        \"May\")\n            echo \"Spring\"\n            ;;\n        \"June\")\n            echo \"Summer\"\n            ;;\n        \"July\")\n            echo \"Summer\"\n            ;;\n        \"August\")\n            echo \"Summer\"\n            ;;\n        *)\n            echo \"None\"\n            ;;\n    esac\n}\n\nseason=$(determine_season \"October\")\nif [[ $season == \"None\" ]]; then\n    echo \"No default case for determining the season.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to determine the season based on the input month. The script then uses this function to determine the season for the month \"October\" and checks if a season is returned. If no season is determined, it outputs a message indicating there is no default case for the month.",
        "Text_details": "Create and execute a bash script that includes a function to determine the season for a given month and handles a specific case where the month does not match any season.\n\n1. Define a bash function named `determine_season` that takes one argument, `month`.\n2. Inside the function, use a `case` statement to match the `month` argument with specific month names and echo the corresponding season:\n   a. For \"December\", \"January\", and \"February\", echo \"Winter\".\n   b. For \"March\", \"April\", and \"May\", echo \"Spring\".\n   c. For \"June\", \"July\", and \"August\", echo \"Summer\".\n   d. For any other month, echo \"None\".\n3. After defining the function, call `determine_season` with the argument \"October\" and store the output in a variable `season`.\n4. Use an `if` statement to check if the value of `season` is \"None\". If it is, echo the message \"No default case for determining the season.\""
    },
    {
        "Index": "22_9",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction classify_vehicle {\n    local type=$1\n    case $type in\n        \"car\")\n            echo \"Land Vehicle\"\n            ;;\n        \"boat\")\n            echo \"Water Vehicle\"\n            ;;\n        \"airplane\")\n            echo \"Air Vehicle\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\nvehicle=$(classify_vehicle \"bike\")\nif [ -z \"$vehicle\" ]; then\n    echo \"No default case for classifying the vehicle.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that classifies a vehicle type as \"Land Vehicle\", \"Water Vehicle\", or \"Air Vehicle\" based on a predefined type. The script includes a function 'classify_vehicle' that takes a vehicle type as an argument and prints the classification. The script attempts to classify the type \"bike\", but since \"bike\" is not defined in the function, it prints a message indicating there is no default case for classifying the vehicle.",
        "Text_details": "Create and execute a bash script that includes a function to classify different types of vehicles and handles an undefined vehicle type.\n\n1. Define a function named `classify_vehicle` that takes one argument representing the type of vehicle.\n2. Inside the function, use a `case` statement to classify the vehicle type:\n   a. If the argument is \"car\", print \"Land Vehicle\".\n   b. If the argument is \"boat\", print \"Water Vehicle\".\n   c. If the argument is \"airplane\", print \"Air Vehicle\".\n   d. For any other argument, do not print anything.\n3. After defining the function, attempt to classify a vehicle type \"bike\" by calling the `classify_vehicle` function with \"bike\" as the argument and store the result in a variable `vehicle`.\n4. Check if the variable `vehicle` is empty using the `-z` test.\n5. If `vehicle` is empty, print the message \"No default case for classifying the vehicle.\" to indicate that the vehicle type \"bike\" does not match any of the predefined cases in the function."
    },
    {
        "Index": "22_10",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction identify_fruit {\n    local color=$1\n    case $color in\n        red)\n            echo \"Apple\"\n            ;;\n        yellow)\n            echo \"Banana\"\n            ;;\n        green)\n            echo \"Kiwi\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\nfruit=$(identify_fruit \"orange\")\nif [ -z \"$fruit\" ]; then\n    echo \"No default case for identifying the fruit.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to identify a fruit based on its color. The script uses the function to attempt to identify a fruit with the color \"orange\" and outputs a message if no matching fruit is found.",
        "Text_details": "Create and execute a bash script that includes a function to identify fruits by color and handles a case where the color does not match any predefined fruit.\n\n1. Define a bash function named `identify_fruit` that takes one argument representing the color of a fruit.\n2. Within the function, use a `case` statement to match the color argument to a specific fruit:\n   a. If the color is \"red\", output \"Apple\".\n   b. If the color is \"yellow\", output \"Banana\".\n   c. If the color is \"green\", output \"Kiwi\".\n   d. For any other color, output an empty string.\n3. Call the `identify_fruit` function with the argument \"orange\" and store the result in a variable named `fruit`.\n4. Check if the `fruit` variable is empty using the `-z` test to determine if the string length is zero.\n5. If the `fruit` variable is empty, output the message \"No default case for identifying the fruit.\" to indicate that no matching fruit was found for the color \"orange\"."
    },
    {
        "Index": "22_11",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction convert_temperature {\n    local unit=$1\n    local value=$2\n    if [ \"$unit\" == \"Celsius\" ]; then\n        echo $(awk \"BEGIN {print ($value * 9/5) + 32}\")\n    elif [ \"$unit\" == \"Fahrenheit\" ]; then\n        echo $(awk \"BEGIN {print ($value - 32) * 5/9}\")\n    else\n        return 1\n    fi\n}\n\ntemperature=$(convert_temperature \"Kelvin\" 300)\nif [ $? -ne 0 ]; then\n    echo \"No default case for converting the temperature.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to convert temperatures between Celsius and Fahrenheit. The script attempts to convert a temperature from Kelvin to another unit, but since Kelvin is not supported, it outputs an error message.",
        "Text_details": "Create and execute a bash script that includes a function for converting temperatures between Celsius and Fahrenheit, and handles unsupported temperature units.\n\n1. Define a bash function named `convert_temperature` with parameters `unit` and `value`.\n2. Inside the function, declare a local variable `unit` and assign it the first argument passed to the function.\n3. Declare another local variable `value` and assign it the second argument passed to the function.\n4. Use an if-else statement to determine the conversion based on the `unit`:\n   a. If the `unit` is \"Celsius\":\n      i. Calculate the temperature in Fahrenheit using the formula (value * 9/5) + 32.\n      ii. Use `awk` to perform the calculation and output the result.\n   b. Else if the `unit` is \"Fahrenheit\":\n      i. Calculate the temperature in Celsius using the formula (value - 32) * 5/9.\n      ii. Use `awk` to perform the calculation and output the result.\n   c. If the `unit` is neither \"Celsius\" nor \"Fahrenheit\", return an error code `1`.\n5. Attempt to convert a temperature by calling the `convert_temperature` function with arguments \"Kelvin\" and `300`.\n6. Store the result of the function call in a variable `temperature`.\n7. Check the exit status of the function call using `$?`. If it is not equal to `0` (indicating an error):\n   a. Output the error message \"No default case for converting the temperature.\""
    },
    {
        "Index": "22_12",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction calculate_grade {\n    local score=$1\n    if (( score >= 90 )); then\n        echo \"A\"\n    elif (( score >= 80 )); then\n        echo \"B\"\n    elif (( score >= 70 )); then\n        echo \"C\"\n    else\n        echo \"None\"\n    fi\n}\n\ngrade=$(calculate_grade 65)\nif [[ $grade == \"None\" ]]; then\n    echo \"No default case for calculating the grade.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to calculate grades based on a score. The script uses the function to determine the grade for a score of 65 and checks if a grade is returned. If no grade is assigned, it outputs a message indicating there is no default case for calculating the grade.",
        "Text_details": "Create and execute a bash script that includes a function to calculate letter grades from numerical scores and handles a specific score without a matching grade.\n\n1. Define a bash function named `calculate_grade` that takes one argument, `score`.\n2. Inside the function, use conditional statements to determine the letter grade based on the `score`:\n   a. If the score is greater than or equal to 90, output \"A\".\n   b. If the score is greater than or equal to 80 but less than 90, output \"B\".\n   c. If the score is greater than or equal to 70 but less than 80, output \"C\".\n   d. If the score is less than 70, output \"None\".\n3. After defining the function, use it to calculate the grade for a predefined score of 65 by calling `calculate_grade 65` and storing the result in a variable `grade`.\n4. Check if the variable `grade` is equal to \"None\". If it is, output the message \"No default case for calculating the grade.\" to indicate that no grade was assigned for the score of 65."
    },
    {
        "Index": "22_13",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction route_direction {\n    case $1 in\n        \"north\")\n            echo \"Go straight ahead.\"\n            ;;\n        \"south\")\n            echo \"Turn back.\"\n            ;;\n        \"east\")\n            echo \"Turn right.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\ndirection=$(route_direction \"west\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for routing the direction.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to provide directions based on the input parameter. The function 'route_direction' accepts a direction ('north', 'south', or 'east') and outputs a corresponding instruction. If an unsupported direction ('west' in this case) is provided, the script outputs a message indicating there is no default case for routing the direction.",
        "Text_details": "Create and execute a bash script that includes a function to give directions and handles unsupported directions with an error message.\n\n1. Define a bash function named `route_direction` that takes one argument representing a cardinal direction.\n2. Inside the function, use a `case` statement to handle different values of the argument:\n   a. If the argument is \"north\", output the string \"Go straight ahead.\"\n   b. If the argument is \"south\", output the string \"Turn back.\"\n   c. If the argument is \"east\", output the string \"Turn right.\"\n   d. For any other argument, return an exit status of 1 to indicate an unsupported direction.\n3. Outside the function, call `route_direction` with the argument \"west\" and store the output in a variable named `direction`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating an error or unsupported direction):\n   a. Output the message \"No default case for routing the direction.\""
    },
    {
        "Index": "22_14",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction assign_seating {\n    local section=$1\n    case $section in\n        \"orchestra\")\n            echo \"Front Rows\"\n            ;;\n        \"mezzanine\")\n            echo \"Middle Rows\"\n            ;;\n        \"balcony\")\n            echo \"Back Rows\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\nseating=$(assign_seating \"box\")\nif [ -z \"$seating\" ]; then\n    echo \"No default case for assigning the seating.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that assigns seating based on the section provided. The script defines a function 'assign_seating' that takes a section name as an argument and prints the seating assignment. The script attempts to assign seating for the section \"box\", but since there is no case for \"box\", it prints a message indicating there is no default case for assigning the seating.",
        "Text_details": "Create and execute a bash script that includes a function to assign seating based on a given section name and handles a case where the section is not recognized.\n\n1. Define a function named `assign_seating` that takes one argument, `section`.\n2. Inside the function, use a `case` statement to handle different values of `section`:\n   a. If `section` is \"orchestra\", print \"Front Rows\".\n   b. If `section` is \"mezzanine\", print \"Middle Rows\".\n   c. If `section` is \"balcony\", print \"Back Rows\".\n   d. For any other value of `section`, print an empty string.\n3. After defining the function, attempt to assign seating by calling `assign_seating` with the argument \"box\" and store the result in a variable `seating`.\n4. Check if the variable `seating` is empty using the `-z` test.\n5. If `seating` is empty, print the message \"No default case for assigning the seating.\" to indicate that there is no case for the section \"box\"."
    },
    {
        "Index": "22_15",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction score_goal {\n    case $1 in\n        \"shoot\")\n            echo \"Goal scored!\"\n            ;;\n        \"pass\")\n            echo \"Assist made.\"\n            ;;\n        \"dribble\")\n            echo \"Player advancing.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\ngoal=$(score_goal \"tackle\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for scoring a goal.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to simulate soccer actions and their outcomes. The function, named 'score_goal', takes an action as an argument and prints a corresponding message. If the action is \"shoot\", it prints \"Goal scored!\"; for \"pass\", it prints \"Assist made.\"; and for \"dribble\", it prints \"Player advancing.\". If the action is not recognized, the function returns an error code. The script then attempts to perform the action \"tackle\" and checks if it fails, printing \"No default case for scoring a goal.\" if there is no case for the action.",
        "Text_details": "Create and execute a bash script that simulates different outcomes based on soccer actions using a function with a case statement.\n\n1. Define a function named `score_goal` that takes a single argument representing a soccer action.\n2. Inside the function, use a case statement to handle different actions:\n   a. If the action is \"shoot\", print the message \"Goal scored!\".\n   b. If the action is \"pass\", print the message \"Assist made.\".\n   c. If the action is \"dribble\", print the message \"Player advancing.\".\n   d. For any other action, return an error code `1` to indicate an unrecognized action.\n3. After defining the function, attempt to simulate scoring a goal with the action \"tackle\" by calling `score_goal \"tackle\"` and store the result in a variable `goal`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating failure or an unrecognized action):\n   a. Print the message \"No default case for scoring a goal.\" to indicate that the action \"tackle\" does not have a corresponding case in the function."
    },
    {
        "Index": "22_16",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction flip_switch {\n    local state=$1\n    case $state in\n        \"on\")\n            echo \"Lights are on.\"\n            ;;\n        \"off\")\n            echo \"Lights are off.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nswitch=$(flip_switch \"dim\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for flipping the switch.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to flip a switch with two states, \"on\" and \"off\". If an invalid state is provided, the script will output a message indicating there is no default case for flipping the switch.",
        "Text_details": "Create and execute a bash script that includes a function to handle a switch with predefined states and provides feedback based on the state.\n\n1. Define a function named `flip_switch` with a single parameter to represent the state of the switch.\n2. Within the function, use a local variable `state` to store the parameter value.\n3. Implement a case statement to handle different values of `state`:\n   a. If `state` is \"on\", output the message \"Lights are on.\"\n   b. If `state` is \"off\", output the message \"Lights are off.\"\n   c. For any other value, return an exit status of 1 to indicate an invalid state.\n4. Outside the function, attempt to set the state of the switch to \"dim\" by calling `flip_switch \"dim\"` and store the result in a variable `switch`.\n5. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating failure or an invalid state):\n   a. Output the message \"No default case for flipping the switch.\""
    },
    {
        "Index": "22_17",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction choose_drink {\n    local beverage=$1\n    case $beverage in\n        \"coffee\")\n            echo \"Hot Coffee\"\n            ;;\n        \"tea\")\n            echo \"Hot Tea\"\n            ;;\n        \"soda\")\n            echo \"Cold Soda\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\ndrink=$(choose_drink \"water\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for choosing a drink.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to choose a drink based on a given input. The function supports three beverages: coffee, tea, and soda. If an unsupported beverage is provided, the script will output a message indicating there is no default case for choosing a drink.",
        "Text_details": "Create and execute a bash script that includes a function to select a drink and handle unsupported beverage choices.\n\n1. Define a function named `choose_drink` with a local variable `beverage` that takes one argument.\n2. Inside the function, use a case statement to handle different values of `beverage`:\n   a. If `beverage` is \"coffee\", output \"Hot Coffee\".\n   b. If `beverage` is \"tea\", output \"Hot Tea\".\n   c. If `beverage` is \"soda\", output \"Cold Soda\".\n   d. For any other value, return an exit status of 1 to indicate an unsupported beverage.\n3. Outside the function, attempt to assign the output of `choose_drink` with the argument \"water\" to a variable named `drink`.\n4. Check the exit status of the last command executed by the function call:\n   a. If the exit status is not equal to 0 (indicating failure or unsupported beverage), output the message \"No default case for choosing a drink.\""
    },
    {
        "Index": "22_18",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction format_text {\n    local style=$1\n    case $style in\n        \"bold\")\n            echo \"<b>Text</b>\"\n            ;;\n        \"italic\")\n            echo \"<i>Text</i>\"\n            ;;\n        \"underline\")\n            echo \"<u>Text</u>\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nformatted_text=$(format_text \"strikethrough\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for formatting text.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to format text with HTML tags based on a given style. The script attempts to format text with the \"strikethrough\" style, which is not defined, resulting in an error message indicating no default case for formatting.",
        "Text_details": "Create and execute a bash script that includes a function to apply HTML formatting to a predefined text based on a given style argument. The script also handles an undefined style case.\n\n1. Define a bash function named `format_text` with a single parameter `style`.\n2. Inside the function, use a `case` statement to match the `style` parameter with predefined formatting options:\n   a. If `style` is \"bold\", output the string \"<b>Text</b>\".\n   b. If `style` is \"italic\", output the string \"<i>Text</i>\".\n   c. If `style` is \"underline\", output the string \"<u>Text</u>\".\n   d. For any other `style` values, return an error code `1` to indicate an unsupported style.\n3. Call the `format_text` function with the argument \"strikethrough\" and capture the output in a variable `formatted_text`.\n4. Check the exit status of the function call using `$?`. If the exit status is not equal to 0 (indicating an error):\n   a. Print the error message \"No default case for formatting text.\" to the console.\n5. Note that the predefined text to be formatted is \"Text\", and the script does not support the \"strikethrough\" style, which triggers the error message."
    },
    {
        "Index": "22_19",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction predict_weather {\n    local condition=$1\n    case $condition in\n        \"sunny\")\n            echo \"Clear skies ahead.\"\n            ;;\n        \"rainy\")\n            echo \"Bring an umbrella.\"\n            ;;\n        \"snowy\")\n            echo \"Wear a coat.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nweather=$(predict_weather \"foggy\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for predicting the weather.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to predict weather conditions. The function takes a single argument representing the weather condition and outputs a corresponding message. If the condition is \"sunny\", it outputs \"Clear skies ahead.\"; if \"rainy\", it outputs \"Bring an umbrella.\"; if \"snowy\", it outputs \"Wear a coat.\". For any other condition, the function returns an error code 1. The script then attempts to predict the weather for the condition \"foggy\" and outputs a message if there is no default case for the prediction.",
        "Text_details": "Create and execute a bash script that includes a function for weather prediction and handles an undefined weather condition.\n\n1. Define a function named `predict_weather` that takes one argument, `condition`.\n2. Inside the function, use a case statement to handle different values of `condition`:\n   a. If `condition` is \"sunny\", output the message \"Clear skies ahead.\".\n   b. If `condition` is \"rainy\", output the message \"Bring an umbrella.\".\n   c. If `condition` is \"snowy\", output the message \"Wear a coat.\".\n   d. For any other value of `condition`, return an error code 1 without outputting a message.\n3. Outside the function, call `predict_weather` with the argument \"foggy\" and store the output in a variable `weather`.\n4. Check the exit status of the last command executed using `$?`.\n5. If the exit status is not equal to 0 (indicating an error), output the message \"No default case for predicting the weather.\"."
    },
    {
        "Index": "22_20",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction control_robot {\n    case $1 in\n        \"forward\")\n            echo \"Robot moving forward.\"\n            ;;\n        \"backward\")\n            echo \"Robot moving backward.\"\n            ;;\n        \"left\")\n            echo \"Robot turning left.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nrobot=$(control_robot \"right\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for controlling the robot.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to control a robot with predefined commands. The function accepts a single argument representing the direction command ('forward', 'backward', or 'left') and outputs a corresponding message. If an unsupported command is given, the function returns an error code. The script attempts to control the robot with the command \"right\" and checks if the function returns an error, in which case it outputs a message indicating there is no default case for the command.",
        "Text_details": "Create and execute a bash script that includes a function to control a robot's movement based on specific commands and handles unsupported commands.\n\n1. Define a bash function named `control_robot` that takes one argument representing the direction command.\n2. Inside the function, use a `case` statement to handle different values of the argument:\n   a. If the argument is \"forward\", output the message \"Robot moving forward.\"\n   b. If the argument is \"backward\", output the message \"Robot moving backward.\"\n   c. If the argument is \"left\", output the message \"Robot turning left.\"\n   d. For any other argument, return an error code `1` to indicate an unsupported command.\n3. Outside the function, attempt to control the robot by calling `control_robot` with the argument \"right\" and store the result in a variable `robot`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to `0` (indicating an error):\n   a. Output the message \"No default case for controlling the robot.\"\n5. If the exit status is `0`, no action is needed as the function has already output the appropriate message for the command."
    },
    {
        "Index": "22_21",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction issue_command {\n    case $1 in\n        \"attack\")\n            echo \"Soldiers advancing.\"\n            ;;\n        \"defend\")\n            echo \"Soldiers holding position.\"\n            ;;\n        \"retreat\")\n            echo \"Soldiers retreating.\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\ncommand=$(issue_command \"flank\")\nif [ -z \"$command\" ]; then\n    echo \"No default case for issuing a command.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to issue commands to soldiers. The function handles three specific commands: \"attack\", \"defend\", and \"retreat\". If an unrecognized command is given, no action is taken. The script attempts to issue the command \"flank\", which is not recognized, and therefore outputs a message indicating that there is no default case for issuing a command.",
        "Text_details": "Create and execute a bash script that includes a function to issue predefined commands and handle an unrecognized command scenario.\n\n1. Define a bash function named `issue_command` that takes a single argument representing a command.\n2. Inside the function, use a `case` statement to match the argument against three possible values:\n   a. If the argument is \"attack\", output the message \"Soldiers advancing.\"\n   b. If the argument is \"defend\", output the message \"Soldiers holding position.\"\n   c. If the argument is \"retreat\", output the message \"Soldiers retreating.\"\n   d. If the argument does not match any of the predefined cases, output an empty string.\n3. After defining the function, attempt to issue a command by calling `issue_command` with the argument \"flank\".\n4. Store the result of the function call in a variable named `command`.\n5. Check if the variable `command` is empty using the `-z` test.\n6. If `command` is empty, output the message \"No default case for issuing a command.\" to indicate that the given command was not recognized."
    },
    {
        "Index": "22_22",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction operate_machine {\n    local mode=$1\n    case $mode in\n        \"auto\")\n            echo \"Machine running in automatic mode.\"\n            ;;\n        \"manual\")\n            echo \"Machine running in manual mode.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nmachine=$(operate_machine \"semi-auto\")\nif [[ $? -ne 0 ]]; then\n    echo \"No default case for operating the machine.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to operate a machine in either automatic or manual mode based on the input parameter. If an unsupported mode is provided, the function will return an error code. The script attempts to operate the machine in \"semi-auto\" mode, which is not supported, and therefore it outputs a message indicating the absence of a default case for operating the machine.",
        "Text_details": "Create and execute a bash script that includes a function to control the operation mode of a machine and handles unsupported operation modes.\n\n1. Define a function named `operate_machine` with a single parameter `mode`.\n2. Inside the function, use a `case` statement to handle different values of `mode`:\n   a. If `mode` is \"auto\", output the message \"Machine running in automatic mode.\"\n   b. If `mode` is \"manual\", output the message \"Machine running in manual mode.\"\n   c. For any other value of `mode`, return an error code `1` to indicate an unsupported mode.\n3. Outside the function, attempt to operate the machine in \"semi-auto\" mode by calling `operate_machine \"semi-auto\"` and store the result in a variable `machine`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to `0` (indicating an error):\n   a. Output the message \"No default case for operating the machine.\"\n5. Since \"semi-auto\" is not a supported mode, the script will output the message indicating the absence of a default case for operating the machine."
    },
    {
        "Index": "22_23",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction serve_food {\n    local dish=$1\n    case $dish in\n        \"pizza\")\n            echo \"Serving pizza.\"\n            ;;\n        \"pasta\")\n            echo \"Serving pasta.\"\n            ;;\n        \"salad\")\n            echo \"Serving salad.\"\n            ;;\n        *)\n            echo \"\"\n            ;;\n    esac\n}\n\nfood=$(serve_food \"burger\")\nif [ -z \"$food\" ]; then\n    echo \"No default case for serving food.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to serve food based on a given dish name. The function supports serving \"pizza\", \"pasta\", and \"salad\". If an unsupported dish such as \"burger\" is requested, the script outputs a message indicating there is no default case for serving that food.",
        "Text_details": "Create and execute a bash script that includes a function to serve specific types of food and handles unsupported dish requests.\n\n1. Define a bash function named `serve_food` with a single parameter.\n2. Within the function, use a local variable `dish` to store the parameter value.\n3. Implement a `case` statement to handle different values of `dish`:\n   a. If `dish` is \"pizza\", output \"Serving pizza.\"\n   b. If `dish` is \"pasta\", output \"Serving pasta.\"\n   c. If `dish` is \"salad\", output \"Serving salad.\"\n   d. For any other value, output an empty string.\n4. After defining the function, attempt to serve a \"burger\" by calling `serve_food \"burger\"` and store the result in a variable `food`.\n5. Check if the variable `food` is empty using the `-z` test.\n6. If `food` is empty, output the message \"No default case for serving food.\""
    },
    {
        "Index": "22_24",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction play_instrument {\n    local name=$1\n    case \"$name\" in\n        guitar)\n            echo \"Strumming the guitar.\"\n            ;;\n        piano)\n            echo \"Playing the piano.\"\n            ;;\n        violin)\n            echo \"Playing the violin.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\ninstrument=$(play_instrument \"drums\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for playing an instrument.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to simulate playing different musical instruments. The script attempts to play the \"drums,\" which is not defined in the function, resulting in a message indicating there is no default case for playing an instrument.",
        "Text_details": "Create and execute a bash script that includes a function to simulate playing musical instruments and handles an undefined instrument case.\n\n1. Define a bash function named `play_instrument` with a single parameter that represents the name of the instrument.\n2. Within the function, use a `case` statement to handle different instrument names:\n   a. If the instrument name is \"guitar\", output the string \"Strumming the guitar.\"\n   b. If the instrument name is \"piano\", output the string \"Playing the piano.\"\n   c. If the instrument name is \"violin\", output the string \"Playing the violin.\"\n   d. For any other instrument name, return an exit status of 1 to indicate an undefined instrument.\n3. Outside the function, attempt to simulate playing an instrument by calling `play_instrument` with the argument \"drums\".\n4. Store the result of the function call in a variable named `instrument`.\n5. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating failure or an undefined instrument):\n   a. Output the message \"No default case for playing an instrument.\""
    },
    {
        "Index": "22_25",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction update_status {\n    case $1 in\n        \"online\")\n            echo \"User is online.\"\n            ;;\n        \"offline\")\n            echo \"User is offline.\"\n            ;;\n        \"busy\")\n            echo \"User is busy.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nuser_status=$(update_status \"away\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for updating the status.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that updates and displays a user's status based on a predefined set of statuses. The script defines a function `update_status` that accepts a status string as an argument and prints a message corresponding to the status. The statuses handled are \"online\", \"offline\", and \"busy\". If a status outside of these predefined options is provided, the function returns an error code. The script then attempts to update the user status to \"away\", which is not a predefined status, and consequently prints a message indicating there is no default case for updating the status.",
        "Text_details": "Create and execute a bash script that defines a function to update a user's status and prints a corresponding message or an error if the status is not recognized.\n\n1. Define a bash function named `update_status` that takes one argument representing the user's status.\n2. Inside the function, use a `case` statement to handle different statuses:\n   a. If the status is \"online\", print \"User is online.\"\n   b. If the status is \"offline\", print \"User is offline.\"\n   c. If the status is \"busy\", print \"User is busy.\"\n   d. For any other status, return an error code `1` to indicate an unrecognized status.\n3. Outside the function, attempt to update the user's status by calling `update_status` with the argument \"away\", which is not one of the predefined statuses. Store the result in a variable `user_status`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to `0` (which indicates an error):\n   a. Print the message \"No default case for updating the status.\" to indicate that the provided status is not recognized."
    },
    {
        "Index": "22_26",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction cast_spell {\n    local spell=$1\n    case $spell in\n        \"fireball\")\n            echo \"Casting fireball.\"\n            ;;\n        \"ice lance\")\n            echo \"Casting ice lance.\"\n            ;;\n        \"lightning bolt\")\n            echo \"Casting lightning bolt.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nmagic=$(cast_spell \"heal\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for casting a spell.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to simulate casting spells. The function accepts a spell name and outputs a message corresponding to the spell cast. The script attempts to cast a spell that is not defined and outputs a message indicating there is no default case for casting that spell.",
        "Text_details": "Create and execute a bash script that simulates casting spells with predefined spell names and handles an undefined spell case.\n\n1. Define a bash function named `cast_spell` that takes one argument representing the name of the spell.\n2. Inside the function, use a `case` statement to match the spell name (`$1`) with predefined spell options:\n   a. If the spell name is \"fireball\", output the message \"Casting fireball.\"\n   b. If the spell name is \"ice lance\", output the message \"Casting ice lance.\"\n   c. If the spell name is \"lightning bolt\", output the message \"Casting lightning bolt.\"\n   d. If the spell name does not match any of the predefined options, return an exit status of 1 to indicate an undefined spell.\n3. Outside the function, attempt to cast a spell by calling `cast_spell` with the argument \"heal\" and store the output in a variable named `magic`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating failure or an undefined spell):\n   a. Output the message \"No default case for casting a spell.\"\n5. If the exit status is 0, no action is taken as the spell was successfully cast and the corresponding message was already output by the function."
    },
    {
        "Index": "22_27",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction set_alarm {\n    case $1 in\n        \"morning\")\n            echo \"Alarm set for 7 AM.\"\n            ;;\n        \"afternoon\")\n            echo \"Alarm set for 12 PM.\"\n            ;;\n        \"evening\")\n            echo \"Alarm set for 6 PM.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nalarm_time=$(set_alarm \"night\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for setting an alarm.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that sets an alarm time based on a predefined argument. The script defines a function 'set_alarm' that accepts a single argument representing the time of day ('morning', 'afternoon', or 'evening') and outputs a corresponding message for the alarm time. If an unrecognized time of day is provided, the function returns an error code. The script attempts to set an alarm for 'night', which is not a recognized time, and outputs a message indicating there is no default case for setting an alarm.",
        "Text_details": "Create and execute a bash script that includes a function to set an alarm for predefined times of the day and handles unrecognized times.\n\n1. Define a bash function named `set_alarm` that takes one argument representing the time of day.\n2. Inside the function, use a `case` statement to handle different times of day:\n   a. If the argument is \"morning\", output \"Alarm set for 7 AM.\"\n   b. If the argument is \"afternoon\", output \"Alarm set for 12 PM.\"\n   c. If the argument is \"evening\", output \"Alarm set for 6 PM.\"\n   d. For any other input, return an error code `1` to indicate an unrecognized time.\n3. Outside the function, attempt to set an alarm by calling `set_alarm` with the argument \"night\", which is not one of the predefined times, and store the output in a variable `alarm_time`.\n4. Check the exit status of the function call using `$?`. If the exit status is not equal to `0` (indicating an error):\n   a. Output the message \"No default case for setting an alarm.\""
    },
    {
        "Index": "22_28",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction pick_color {\n    local shade=$1\n    case $shade in\n        \"light\")\n            echo \"Choose pastel colors.\"\n            ;;\n        \"dark\")\n            echo \"Choose deep colors.\"\n            ;;\n        \"vibrant\")\n            echo \"Choose bright colors.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\ncolor_choice=$(pick_color \"neutral\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for picking a color.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to suggest color choices based on a given shade. The function 'pick_color' accepts a shade type and outputs a color choice recommendation. If an unsupported shade type is provided, the script will output a message indicating that there is no default case for picking a color.",
        "Text_details": "Create and execute a bash script that includes a function to suggest color choices and handles unsupported shade types.\n\n1. Define a function named `pick_color` that takes one argument, `shade`.\n2. Inside the function, use a case statement to handle different values of `shade`:\n   a. If `shade` is \"light\", output the string \"Choose pastel colors.\"\n   b. If `shade` is \"dark\", output the string \"Choose deep colors.\"\n   c. If `shade` is \"vibrant\", output the string \"Choose bright colors.\"\n   d. For any other value of `shade`, return an exit status of 1 to indicate an unsupported option.\n3. Outside the function, attempt to call `pick_color` with the argument \"neutral\" and store the output in a variable `color_choice`.\n4. Check the exit status of the function call using `$?`. If the exit status is not equal to 0 (indicating failure or an unsupported option):\n   a. Output the message \"No default case for picking a color.\"\n5. If the exit status is 0, the script will not output anything additional, as the function will have already provided the appropriate message."
    },
    {
        "Index": "22_29",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction initiate_protocol {\n    case $1 in\n        \"lockdown\")\n            echo \"Initiating lockdown protocol.\"\n            ;;\n        \"evacuate\")\n            echo \"Initiating evacuation protocol.\"\n            ;;\n        \"quarantine\")\n            echo \"Initiating quarantine protocol.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nprotocol=$(initiate_protocol \"standby\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for initiating a protocol.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to initiate different protocols based on a given argument. The script attempts to initiate a \"standby\" protocol, which is not defined, resulting in a message indicating that there is no default case for initiating a protocol.",
        "Text_details": "Create and execute a bash script that includes a function to handle different protocols and checks for an undefined protocol case.\n\n1. Define a bash function named `initiate_protocol` that takes one argument.\n2. Inside the function, use a `case` statement to handle different protocol strings:\n   a. If the argument is \"lockdown\", print \"Initiating lockdown protocol.\"\n   b. If the argument is \"evacuate\", print \"Initiating evacuation protocol.\"\n   c. If the argument is \"quarantine\", print \"Initiating quarantine protocol.\"\n   d. For any other argument, return an exit status of 1 to indicate an unrecognized protocol.\n3. Outside the function, attempt to initiate a protocol by calling `initiate_protocol` with the argument \"standby\" and store the result in a variable `protocol`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating failure or an unrecognized protocol):\n   a. Print the message \"No default case for initiating a protocol.\"\n5. Note that the \"standby\" protocol is not defined within the function, so the script will print the message indicating no default case."
    },
    {
        "Index": "22_30",
        "Prompt": "",
        "Language": "bash",
        "Code": "#!/bin/bash\nfunction authorize_access {\n    local level=$1\n    case $level in\n        \"admin\")\n            echo \"Access granted.\"\n            ;;\n        \"user\")\n            echo \"Limited access.\"\n            ;;\n        \"guest\")\n            echo \"View-only access.\"\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\naccess=$(authorize_access \"vip\")\nif [ $? -ne 0 ]; then\n    echo \"No default case for authorizing access.\"\nfi",
        "expected_result": "No default case",
        "Text_summary": "Create and execute a bash script that defines a function to authorize access based on user levels: admin, user, and guest. The script attempts to authorize a \"vip\" level, which is not defined, and therefore it outputs a message indicating there is no default case for authorizing access.",
        "Text_details": "Create and execute a bash script that includes a function to handle user access authorization based on predefined user levels and handles an undefined user level case.\n\n1. Define a bash function named `authorize_access` that takes one argument representing the user level.\n2. Within the function, use a `case` statement to match the user level argument (`level`) against predefined cases:\n   a. If the level is \"admin\", output the message \"Access granted.\"\n   b. If the level is \"user\", output the message \"Limited access.\"\n   c. If the level is \"guest\", output the message \"View-only access.\"\n   d. For any other level, return an exit status of 1 to indicate an error or undefined level.\n3. Outside the function, attempt to authorize access for the user level \"vip\" by calling the `authorize_access` function with \"vip\" as an argument and store the output in a variable `access`.\n4. Check the exit status of the last command executed using `$?`. If the exit status is not equal to 0 (indicating a non-successful command execution):\n   a. Output the message \"No default case for authorizing access.\"\n5. Note that since \"vip\" is not a predefined user level in the function, the script will output the message indicating there is no default case for authorizing access."
    }
]